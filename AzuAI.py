# meta developer: Azu-nyyyyyyaaaaan\n# üîê This code is licensed under CC-BY-NC Licence! - https://creativecommons.org/licenses/by-nc/4.0/\n\nimport aiohttp\nfrom .. import loader, utils\nfrom telethon import events\nimport os\nimport tempfile\nimport asyncio # New import for sleep\nfrom openai import AsyncOpenAI # Changed import for OnlySq provider\nimport base64 # Existing, ensure it\\\'s here for media handling\nimport mimetypes # Existing, ensure it\\\'s here for media handling\n\nONLYSQ_TEXT_MODELS = [\n    \\\"gemini-2.5-flash-preview-04-17\\\",\n    \\\"gemini-2.0-flash\\\",\n    \\\"gemini-2.0-flash-lite\\\",\n    \\\"gemini-1.5-flash\\\",\n    \\\"gemini-1.5-flash-8b\\\",\n    \\\"command-a-03-2025\\\",\n    \\\"command-r7b-12-2024\\\",\n    \\\"command-r-plus-04-2024\\\",\n    \\\"command-r-08-2024\\\",\n    \\\"command-r-03-2024\\\",\n    \\\"command-r\\\",\n    \\\"command\\\",\n    \\\"command-nightly\\\",\n    \\\"command-light\\\",\n    \\\"command-light-nightly\\\",\n    \\\"c4ai-aya-expanse-32b\\\",\n    \\\"gpt-4o-mini\\\",\n    \\\"gpt-4o\\\",\n    \\\"gpt-4\\\",\n    \\\"gpt-3.5-turbo\\\",\n    \\\"o3-mini\\\",\n    \\\"evil\\\",\n    \\\"mistral-small-3.1\\\"\n]\n\n@loader.tds\nclass AzuAI(loader.Module):\n    \\\"\\\"\\\"–ú–æ–¥—É–ª—å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏ Gemini, OpenRouter –∏ OnlySq —Å –≤—ã–±–æ—Ä–æ–º –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏\\\"\\\"\\\"\n    strings = {\n        \\\"name\\\": \\\"AzuAI\\\"\n    }\n\n    def __init__(self):\n        self.config = loader.ModuleConfig(\n            \\\"GEMINI_API_KEY\\\", \\\"\\\", \\\"API-–∫–ª—é—á –¥–ª—è Gemini AI\\\",\n            \\\"OPENROUTER_API_KEY\\\", \\\"\\\", \\\"API-–∫–ª—é—á –¥–ª—è OpenRouter\\\",\n            \\\"ONLYSQ_API_KEY\\\", \\\"openai\\\", \\\"API-–∫–ª—é—á –¥–ª—è OnlySq (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é \\\'openai\\\')\\\", # Updated default value\n            \\\"DEFAULT_PROVIDER\\\", 1, \\\"–ü—Ä–æ–≤–∞–π–¥–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1 - Gemini, 2 - OpenRouter, 3 - OnlySq\\\",\n            \\\"ONLYSQ_IMAGE_MODEL\\\", \\\"kandinsky\\\", \\\"–ú–æ–¥–µ–ª—å OnlySq –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\\\" # New config\n        )\n        self.selected_models = {\\\"gemini\\\": \\\"gemini-2.5-flash-preview-05-20\\\", \\\"openrouter\\\": \\\"meta-llama/llama-3.1-8b-instruct:free\\\", \\\"onlysq\\\": \\\"o3-mini\\\"} # Updated default model for OnlySq\n        self.model_lists = {\\\"gemini\\\": [], \\\"openrouter\\\": [], \\\"onlysq\\\": []} # Add OnlySq to model lists\n        self.chat_contexts = {} # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ —á–∞—Ç–∞–º\n        self.chat_histories = {} # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ —á–∞—Ç–∞–º\n\n    async def client_ready(self, client, db):\\\n        self.client = client\n        self.db = db\n        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n        self.chat_contexts = self.db.get(self.strings[\\\"name\\\"], \\\"chat_contexts\\\", {})\\\n        self.chat_histories = self.db.get(self.strings[\\\"name\\\"], \\\"chat_histories\\\", {})\\\n        await self._fetch_models()\n\n    async def _fetch_models(self):\\\n        \\\"\\\"\\\"–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ Gemini, OpenRouter –∏ OnlySq\\\"\\\"\\\"\\\n        # Gemini\n        if self.config[\\\"GEMINI_API_KEY\\\"]:\\\n            url = f\\\"https://generativelanguage.googleapis.com/v1beta/models?key={self.config[\\\'GEMINI_API_KEY\\\']}\\\"\\\n            async with aiohttp.ClientSession() as session:\\\n                try:\\\n                    async with session.get(url) as response:\\\n                        if response.status == 200:\\\n                            data = await response.json()\\\n                            self.model_lists[\\\"gemini\\\"] = [model[\\\"name\\\"] for model in data.get(\\\"models\\\", []) if \\\"generateContent\\\" in model[\\\"supportedGenerationMethods\\\"]] # Filter for models that support generateContent\n                            print(\\\"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –º–æ–¥–µ–ª–∏ Gemini\\\")\\\n                            print(f\\\"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ Gemini Models (status 200): {data}\\\")\\\n                        else:\\\n                            error_text = await response.text()\\\n                            print(f\\\"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π Gemini. –°—Ç–∞—Ç—É—Å: {response.status}, –û—Ç–≤–µ—Ç: {error_text[:200]}...\\\")\\\n                            self.model_lists[\\\"gemini\\\"] = []\\\n                except Exception as e:\\\n                    print(f\\\"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π Gemini: {str(e)}\\\")\\\n                    self.model_lists[\\\"gemini\\\"] = []\\\n        else:\\\n             print(\\\"API-–∫–ª—é—á Gemini –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π.\\\")\\\n             self.model_lists[\\\"gemini\\\"] = []\\\n\n        # OpenRouter (—Ç–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ)\\\n        if self.config[\\\"OPENROUTER_API_KEY\\\"]:\\\n            url = \\\"https://openrouter.ai/api/v1/models\\\"\\\n            headers = {\\\"Authorization\\\": f\\\"Bearer {self.config[\\\'OPENROUTER_API_KEY\\\']}\\\"}\\\n            async with aiohttp.ClientSession() as session:\\\n                try:\\\n                    async with session.get(url, headers=headers) as response:\\\n                        if response.status == 200:\\\n                            data = await response.json()\\\n                            all_openrouter_models = [model[\\\"id\\\"] for model in data.get(\\\"data\\\", [])]\\\n                            self.model_lists[\\\"openrouter\\\"] = [\\\n                                model_id for model_id in all_openrouter_models\\\n                                if model_id.startswith(\\\'google/\\\') or model_id.startswith(\\\'deepseek/\\\') or model_id.startswith(\\\'meta-llama/\\\')\\\n                            ]\\\n                            print(\\\"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –≤—Å–µ –º–æ–¥–µ–ª–∏ OpenRouter.\\\")\\\n                            print(f\\\"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π –¥–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(all_openrouter_models)}\\\")\\\n                            print(f\\\"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π OpenRouter –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(self.model_lists[\\\'openrouter\\\'])}\\\")\\\n                            print(\\\"–°–ø–∏—Å–æ–∫ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π OpenRouter:\\\")\\\n                            for model_id in self.model_lists[\\\"openrouter\\\"]:\\\n                                print(f\\\"- {model_id}\\\")\\\n                            print(f\\\"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ OpenRouter Models (status 200): {data}\\\")\\\n                        else:\\\n                            error_text = await response.text()\\\n                            print(f\\\"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π OpenRouter. –°—Ç–∞—Ç—É—Å: {response.status}, –û—Ç–≤–µ—Ç: {error_text}\\\")\\\n                            self.model_lists[\\\"openrouter\\\"] = []\\\n                except Exception as e:\\\n                    print(f\\\"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π OpenRouter: {str(e)}\\\")\\\n                    self.model_lists[\\\"openrouter\\\"] = []\\\n        else:\\\n            print(\\\"API-–∫–ª—é—á OpenRouter –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π.\\\")\\\n            self.model_lists[\\\"openrouter\\\"] = []\\\n\n        # OnlySq (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π)\\\n        if self.config[\\\"ONLYSQ_API_KEY\\\"]:\\\n            self.model_lists[\\\"onlysq\\\"] = ONLYSQ_TEXT_MODELS # Directly assign the predefined list\n            print(\\\"–ú–æ–¥–µ–ª–∏ OnlySq –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.\\\")\\\n            print(f\\\"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π OnlySq: {len(self.model_lists[\\\'onlysq\\\'])}\\\")\\\n            print(\\\"–°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π OnlySq:\\\")\\\n            for model_id in self.model_lists[\\\"onlysq\\\"]:\\\n                print(f\\\"- {model_id}\\\")\\\n        else:\\\n            print(\\\"API-–∫–ª—é—á OnlySq –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π.\\\")\\\n            self.model_lists[\\\"onlysq\\\"] = []\\\n\n    def _create_model_buttons(self, service):\\\n        \\\"\\\"\\\"–°–æ–∑–¥–∞—Ç—å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏\\\"\\\"\\\"\\\n        buttons = []\\\n        models = self.model_lists.get(service, [])\\\n        if not models:\\\n            return []\\\n        for model in models:\\\n            buttons.append([{\\\"text\\\": model, \\\"callback\\\": self._set_model, \\\"args\\\": (service, model)}])\\\n        buttons.append([{\\\"text\\\": \\\"‚¨ÖÔ∏è –ù–∞–∑–∞–¥\\\", \\\"callback\\\": self._back_to_services}])\\\n        return buttons\\\n\n    async def aicfgcmd(self, message):\\\n        \\\"\\\"\\\"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏ –º–æ–¥–µ–ª—å, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å API-–∫–ª—é—á–∏ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥—É–ª—è\\\"\\\"\\\"\\\n        await self.inline.form(\\\n            text=\\\"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ AIModule:</b>\\\\n\\\\nAPI-–∫–ª—é—á–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª—è (—á–µ—Ä–µ–∑ —Ñ–∞–π–ª –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã setkey, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã).\\\",\\\n            message=message,\\\n            reply_markup=[\\\n                [{\\\"text\\\": \\\"–í—ã–±–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞\\\", \\\"callback\\\": self._show_settings_menu, \\\"args\\\": (\\\"providers\\\",)}],\\\n                [{\\\"text\\\": \\\"–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏\\\", \\\"callback\\\": self._show_settings_menu, \\\"args\\\": (\\\"models_service\\\",)}]\\\n            ]\\\n        )\\\n\n    async def _show_settings_menu(self, call, menu_type):\\\n        text = \\\"\\\"\\\n        reply_markup = []\\\n\n        if menu_type == \\\"main\\\":\\\n            text = \\\"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ AIModule:</b>\\\\n\\\\nAPI-–∫–ª—é—á–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª—è (—á–µ—Ä–µ–∑ —Ñ–∞–π–ª –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã setkey, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã).\\\"\\\n            reply_markup = [\\\n                [{\\\"text\\\": \\\"–í—ã–±–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞\\\", \\\"callback\\\": self._show_settings_menu, \\\"args\\\": (\\\"providers\\\",)}],\\\n                [{\\\"text\\\": \\\"–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏\\\", \\\"callback\\\": self._show_settings_menu, \\\"args\\\": (\\\"models_service\\\",)}]\\\n            ]\\\n        elif menu_type == \\\"providers\\\":\\\n            current_provider = self.config[\\\"DEFAULT_PROVIDER\\\"]\\\n            def get_provider_button(provider_id, provider_name):\\\n                text = provider_name\\\n                if current_provider == provider_id:\\\n                    text += \\\"üü£\\\"\\\n                return {\\\"text\\\": text, \\\"callback\\\": self._set_provider, \\\"args\\\": (provider_id,)}\\\n\n            text = \\\"üîß <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:</b>\\\"\\\n            reply_markup = [\\\n                [get_provider_button(1, \\\"Gemini\\\")],\\\n                [get_provider_button(2, \\\"OpenRouter\\\")],\\\n                [get_provider_button(3, \\\"OnlySq\\\")], # New OnlySq button\n                [{\\\"text\\\": \\\"‚¨ÖÔ∏è –ù–∞–∑–∞–¥\\\", \\\"callback\\\": self._show_settings_menu, \\\"args\\\": (\\\"main\\\",)}]\\\n            ]\\\n        elif menu_type == \\\"models_service\\\":\\\n            text = \\\"üîß <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏:</b>\\\"\\\n            reply_markup = [\\\n                [{\\\"text\\\": \\\"Gemini\\\", \\\"callback\\\": self._show_models, \\\"args\\\": (\\\"gemini\\\",)}],\\\n                [{\\\"text\\\": \\\"OpenRouter\\\", \\\"callback\\\": self._show_models, \\\"args\\\": (\\\"openrouter\\\",)}],\\\n                [{\\\"text\\\": \\\"OnlySq\\\", \\\"callback\\\": self._show_models, \\\"args\\\": (\\\"onlysq\\\",)}], # New OnlySq button\n                [{\\\"text\\\": \\\"‚¨ÖÔ∏è –ù–∞–∑–∞–¥\\\", \\\"callback\\\": self._show_settings_menu, \\\"args\\\": (\\\"main\\\",)}]\\\n            ]\\\n\n        await call.edit(text=text, reply_markup=reply_markup)\\\n\n    async def _set_provider(self, call, provider_id):\\\n        \\\"\\\"\\\"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏\\\"\\\"\\\"\\\n        self.config[\\\"DEFAULT_PROVIDER\\\"] = provider_id\\\n        provider_name = \\\"\\\"\\\n        if provider_id == 1: provider_name = \\\"Gemini\\\"\\\n        elif provider_id == 2: provider_name = \\\"OpenRouter\\\"\\\n        elif provider_id == 3: provider_name = \\\"OnlySq\\\"\\\n        await call.edit(f\\\"–ü—Ä–æ–≤–∞–π–¥–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {provider_name}\\\")\\\n        await asyncio.sleep(1) # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É\n        await self._show_settings_menu(call, \\\"providers\\\") # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º\n\n    async def _show_models(self, call, service):\\\n        \\\"\\\"\\\"–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏\\\"\\\"\\\"\\\n        models = self.model_lists.get(service, [])\\\n        if not models:\\\n            await call.edit(f\\\"‚ö†Ô∏è <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è {service}.</b> –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API-–∫–ª—é—á –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\\\")\\\n            await self._show_settings_menu(call, \\\"models_service\\\") # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞\n            return\\\n        buttons = []\\\n        selected_model = self.selected_models.get(service)\\\n        for model in models:\\\n            button_text = model\\\n            if model == selected_model:\\\n                button_text += \\\"üü£\\\"\\\n            buttons.append([{\\\"text\\\": button_text, \\\"callback\\\": self._set_model, \\\"args\\\": (service, model)}])\\\n        buttons.append([\\\n            {\\\"text\\\": \\\"‚¨ÖÔ∏è –ù–∞–∑–∞–¥\\\", \\\"callback\\\": self._show_settings_menu, \\\"args\\\": (\\\"models_service\\\",)}\\\n        ])\\\n        await call.edit(\\\n            f\\\"üîß <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è {service}:</b>\\\",\\\n            reply_markup=buttons\\\n        )\\\n\n    async def _set_model(self, call, service, model):\\\n        \\\"\\\"\\\"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –∏–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏\\\"\\\"\\\"\\\n        self.selected_models[service] = model\\\n        await call.edit(f\\\"‚úÖ <b>–ú–æ–¥–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞:</b> {model}\\\")\\\n        await asyncio.sleep(1) # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É\n        await self._show_models(call, service) # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º\n\n    async def _back_to_aicfg(self, call):\\\n        # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞, —Ç–∞–∫ –∫–∞–∫ _show_settings_menu —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –Ω–∞–∑–∞–¥\n        pass\\\n\n    async def askcmd(self, message):\\\n        \\\"\\\"\\\"–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò. –ü—Ä–∏–º–µ—Ä: .ask –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å .ask\\\"\\\"\\\"\\\n        query = utils.get_args_raw(message).strip()\\\n        media_path = None # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º media_path –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –æ–Ω–∞ –≤—Å–µ–≥–¥–∞ –±—ã–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞\n\n        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –º–µ–¥–∏–∞/—Ç–µ–∫—Å—Ç –∏–∑ –Ω–µ–≥–æ, –µ—Å–ª–∏ –µ—Å—Ç—å\n        if message.is_reply:\\\n            try:\\\n                reply_message = await message.get_reply_message()\\\n                if reply_message:\\\n                    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫ –∑–∞–ø—Ä–æ—Å—É, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ –ø—É—Å—Ç\n                    # –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å, –µ—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø—É—Å—Ç—ã–µ\n                    if reply_message.text:\\\n                        if not query:\\\n                            query = reply_message.text.strip()\\\n                        else:\\\n                            query += \\\"\\\\n\\\" + reply_message.text.strip()\\\n\n                    if reply_message.photo or (reply_message.document and reply_message.document.mime_type and reply_message.document.mime_type.startswith(\\\'image/\\\')):\\\n                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏\n                        processing_message = await utils.answer(message, \\\"üß† –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ó–∞–≥—Ä—É–∑–∫–∞...\\\")\\\n                        try:\\\n                            media_path = await reply_message.download_media(file=tempfile.gettempdir())\\\n                            await processing_message.edit(\\\"üß† –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...\\\")\\\n                        except Exception as e:\\\n                            await utils.answer(message, f\\\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}\\\")\\\n                            return\\\n                    elif reply_message.document:\\\n                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã\n                        mime_type = reply_message.document.mime_type\\\n                        if mime_type and (mime_type.startswith(\\\'text/\\\') or mime_type in [\\\'application/json\\\', \\\'application/xml\\\', \\\'text/html\\\', \\\'text/csv\\\', \\\'application/javascript\\\', \\\'application/x-sh\\\', \\\'application/x-python\\\']):\\\n                            processing_message = await utils.answer(message, f\\\"üß† –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª ({mime_type}). –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —á—Ç–µ–Ω–∏–µ...\\\")\\\n                            try:\\\n                                temp_file_path = await reply_message.download_media(file=tempfile.gettempdir())\\\n                                with open(temp_file_path, \\\'r\\\', encoding=\\\'utf-8\\\') as f:\\\
                                    file_content = f.read()\\\n                                os.remove(temp_file_path) # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª\n                                if not query:\\\n                                    query = file_content\\\n                                else:\\\n                                    query += \\\"\\\\n\\\\n--- –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ ---\\\\n\\\" + file_content\\\n                                await processing_message.edit(\\\"üß† –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...\\\")\\\n                            except Exception as e:\\\n                                await utils.answer(message, f\\\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–ª–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}\\\")\\\n                                return\\\n                        else:\\\n                            # –î–ª—è –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–≤–∫–ª—é—á–∞—è –≤–∏–¥–µ–æ)\n                            await utils.answer(message, f\\\"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ü—Ä—è–º–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ —Ç–∏–ø–∞ \\\'{mime_type}\\\' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.\\\")\\\n                            try:\\\n                                # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å media_path –¥–ª—è –ò–ò\n                                temp_file_to_cleanup = await reply_message.download_media(file=tempfile.gettempdir())\\\n                                os.remove(temp_file_to_cleanup)\\\n                            except Exception: # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏\n                                pass\\\n            except Exception as e:\\\n                await utils.answer(message, f\\\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–¥–∏–∞: {str(e)}\\\")\\\n                return\\\n\n        if not query and not media_path:\\\n            await utils.answer(message, \\\"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ. –ü—Ä–∏–º–µ—Ä: <code>.ask –≤–∞—à –≤–æ–ø—Ä–æ—Å</code>\\\")\\\n            return\\\n        \\\n        service = \\\"\\\"\\\n        if self.config[\\\"DEFAULT_PROVIDER\\\"] == 1: service = \\\"gemini\\\"\\\n        elif self.config[\\\"DEFAULT_PROVIDER\\\"] == 2: service = \\\"openrouter\\\"\\\n        elif self.config[\\\"DEFAULT_PROVIDER\\\"] == 3: service = \\\"onlysq\\\"\\\n\n        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞\n        # processing_message = await utils.answer(message, \\\"üß† –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...\\\") # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è\n\n        chat_id = str(message.chat_id)\\\n        is_context_enabled = self.chat_contexts.get(chat_id, False)\\\n        history = self.chat_histories.get(chat_id, [])\\\n\n        if is_context_enabled:\\\n            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞\n            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏ —Ç–µ–∫—Å—Ç –∏ –º–µ–¥–∏–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏, —Ç.–∫. –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —Ç–µ–∫—Å—Ç–æ–≤–∞—è\n            if query:\\\n                history.append({\\\"role\\\": \\\"user\\\", \\\"content\\\": query})\\\n                self.chat_histories[chat_id] = history\\\n\n        # –õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞, —Ç.–∫. Gemini —Å–∞–º —Ä–µ—à–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ Grounding (–ø–æ–∏—Å–∫)\\\n\n        ai_response_message = None\\\n        if service == \\\"gemini\\\":\\\n            ai_response_message = await self._ask_gemini(message, query, history if is_context_enabled else [], media_path) # –ü–µ—Ä–µ–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª\n        elif service == \\\"openrouter\\\":\\\n            ai_response_message = await self._ask_openrouter(message, query, history if is_context_enabled else [], media_path) # –ü–µ—Ä–µ–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª\n        elif service == \\\"onlysq\\\":\\\n            ai_response_message = await self._ask_onlysq(message, query, history if is_context_enabled else [], media_path) # New call for OnlySq\n\n        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ \\\"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...\\\"\\\n        # if processing_message:\\\n        #     await processing_message.delete() # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è\n\n        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–µ–¥–∏–∞—Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω\n        if media_path and os.path.exists(media_path):\\\n            os.remove(media_path)\\\n\n        # –ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –ò–ò, –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–∫–ª—é—á–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–∞\n        # if is_context_enabled and ai_response_message:\\\n        #     await self.inline.form(\\\n        #         text=ai_response_message.text, # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ò–ò\n        #         message=ai_response_message, # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ —Å–æ–æ–±—â–µ–Ω–∏—é —Å –æ—Ç–≤–µ—Ç–æ–º –ò–ò\n        #         reply_markup=[[{\\\"text\\\": \\\"üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥\\\", \\\"callback\\\": self._clear_chat_history_callback}]],\\\n        #         disable_security=True # –†–∞–∑—Ä–µ—à–∞–µ–º –±–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏\n        #     )\\\n\n    async def _ask_gemini(self, message, query, history=[], media_path=None): # –î–æ–±–∞–≤–ª—è–µ–º history –∏ media_path –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç—ã\n        api_key = self.config[\\\"GEMINI_API_KEY\\\"]\\\n        if not api_key:\\\n            await utils.answer(message, \\\"API-–∫–ª—é—á –¥–ª—è Gemini –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>.setkey {{gemini,openrouter,onlysq}} &lt;–≤–∞—à_–∫–ª—é—á&gt;</code>.\\\")\\\n            return\\\n\n        # –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å Gemini API —á–µ—Ä–µ–∑ HTTP —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Grounding\n        model_id = self.selected_models[\\\'gemini\\\'].replace(\\\'models/\\\', \\\'\\\')\\\n        url = f\\\"https://generativelanguage.googleapis.com/v1beta/models/{model_id}:generateContent?key={api_key}\\\"\\\n        headers = {\\\"Content-Type\\\": \\\"application/json\\\"}\\\n\n        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞\n        contents = []\\\n        for msg in history:\\\n            contents.append({\\\"role\\\": msg[\\\"role\\\"], \\\"parts\\\": [{\\\"text\\\": msg[\\\"content\\\"]}]})\\\n        \\\n        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª, –µ—Å–ª–∏ –µ—Å—Ç—å\n        parts = []\\\n        if query:\\\n            parts.append({\\\"text\\\": query})\\\n        if media_path: # media_path –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é\n            try:\\\n                with open(media_path, \\\"rb\\\") as f:\\\
                    encoded_media = base64.b64encode(f.read()).decode(\\\'utf-8\\\')\\\n\n                mime_type, _ = mimetypes.guess_type(media_path)\\\n                if mime_type and mime_type.startswith(\\\'image/\\\'):\\\n                    parts.append({\\\"inline_data\\\": {\\\"mime_type\\\": mime_type, \\\"data\\\": encoded_media}})\\\n                else:\\\n                    # –≠—Ç–æ—Ç —Å–ª—É—á–∞–π –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, –µ—Å–ª–∏ askcmd –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç media_path\n                    await utils.answer(message, \\\"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –¥–ª—è Gemini (–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ). –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞.\\\")\\\n\n            except Exception as e:\\\n                await utils.answer(message, f\\\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –¥–ª—è Gemini: {str(e)}\\\")\\\n                return\\\n\n        if not parts:\\\n            await utils.answer(message, \\\"–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —á–∞—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è Gemini (–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –º–µ–¥–∏–∞).\\\")\\\n            return\\\n\n        contents.append({\\\"role\\\": \\\"user\\\", \\\"parts\\\": parts})\\\n\n        payload = {\\n            \\\"contents\\\": contents,\\n            \\\"tools\\\": [\\n                {\\n                    \\\"googleSearch\\\": {} # –û—Å—Ç–∞–≤–ª—è–µ–º Grounding –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞\n                }\\n            ]\\n        }\\n\\n        async with aiohttp.ClientSession() as session:\\\n            try:\\\n                async with session.post(url, json=payload, headers=headers) as response:\\\n                    if response.status != 200:\\\n                        error_text = await response.text()\\\n                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º\n                        await utils.answer(message, f\\\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini (HTTP): Status {response.status}: {error_text[:200]}...\\\")\\\n                        return\\\n                    data = await response.json()\\\n\n                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞\n                    if data and \\\"candidates\\\" in data and data[\\\"candidates\\\"]:\\\n                         answer_parts = []\\\n                         for part in data[\\\"candidates\\\"][0][\\\"content\\\"][\\\"parts\\\"]:\\\n                              if \\\"text\\\" in part:\\\n                                   answer_parts.append(part[\\\"text\\\"])\\\n                              if \\\"groundingAttributions\\\" in part:\\\n                                   for attribution in part:\\\'groundingAttributions\\\']:\\\n                                        if \\\"uri\\\" in attribution:\\\n                                             answer_parts.append(f\\\" [[{attribution.get(\\\'title\\\', \\\'—Å—Å—ã–ª–∫–∞\\\')}]]({\\\'uri\\\'})\\\")\\\n\n                         answer = \\\"\\\".join(answer_parts)\\\n\n                         if not answer:\\\n                             if data[\\\"candidates\\\"][0].get(\\\"finishReason\\\") == \\\"SAFETY\\\" or data[\\\"candidates\\\"][0].get(\\\"blockReason\\\"):\\\n                                  block_reason = data[\\\"candidates\\\"][0].get(\\\"blockReason\\\") or data[\\\"candidates\\\"][0].get(\\\"finishReason\\\")\\\n                                  await utils.answer(message, f\\\"‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –∫ Gemini –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {block_reason}\\\")\\\n                             else:\\\n                                  await utils.answer(message, \\\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini (HTTP): –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API\\\")\\\n                         else:\\\n                             await utils.answer(message, f\\\"<b>Gemini ({self.selected_models[\\\'gemini\\\']}):</b>\\\\n{answer}\\\")\\\n                             # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–∫–ª—é—á–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò –≤ –∏—Å—Ç–æ—Ä–∏—é\n                             if str(message.chat_id) in self.chat_contexts and self.chat_contexts[str(message.chat_id)]:\\\n                                self.chat_histories[str(message.chat_id)].append({\\\"role\\\": \\\"model\\\", \\\"content\\\": answer})\\\n                                self.db.set(self.strings[\\\"name\\\"], \\\"chat_histories\\\", self.chat_histories) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î\\\n\n                    elif data and \\\"promptFeedback\\\" in data and data[\\\"promptFeedback\\\"].get(\\\"blockReason\\\"):\\\n                         block_reason = data[\\\"promptFeedback\\\"][\\\"blockReason\\\"]\\\n                         await utils.answer(message, f\\\"‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –∫ Gemini –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {block_reason}\\\")\\\n                    else:\\\n                         await utils.answer(message, \\\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini (HTTP): –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API\\\")\\\n\n            except Exception as e:\\\n                await utils.answer(message, f\\\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini (HTTP): {str(e)}\\\")\\\n\n    async def _ask_openrouter(self, message, query, history=[], media_path=None): # –î–æ–±–∞–≤–ª—è–µ–º history –∏ media_path –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç—ã\n        api_key = self.config[\\\"OPENROUTER_API_KEY\\\"]\\\n        if not api_key:\\\n            await utils.answer(message, \\\"API-–∫–ª—é—á –¥–ª—è OpenRouter –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>.setkey {{gemini,openrouter,onlysq}} &lt;–≤–∞—à_–∫–ª—é—á&gt;</code>.\\\")\\\n            return\\\n        url = \\\"https://openrouter.ai/api/v1/chat/completions\\\"\\\n        headers = {\\\n            \\\"Authorization\\\": f\\\"Bearer {api_key}\\\",\\\n            \\\"Content-Type\\\": \\\"application/json\\\"\\\n        }\\\n\n        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞\n        messages = []\\\n        for msg in history:\\\n            messages.append({\\\"role\\\": msg[\\\"role\\\"], \\\"content\\\": msg[\\\"content\\\"]})\\\n        \\\n        # OpenRouter –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–π –≤–≤–æ–¥ –∏–∑ –∫–æ—Ä–æ–±–∫–∏ —á–µ—Ä–µ–∑ —Å–≤–æ–π `/chat/completions` API –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π.\\\n        # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–¥–µ–ª–∏ –º–æ–≥—É—Ç –∏–º–µ—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏–ª–∏ —Ç—Ä–µ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç.\\\n        # –ü–æ–∫–∞ —á—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞, –º—ã –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∏–º, —á—Ç–æ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è OpenRouter –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞.\\\n        if media_path:\\\n            await utils.answer(message, \\\"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: OpenRouter –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä—è–º—É—é –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π/–≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ —Ç–µ–∫—É—â–∏–π API. –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞.\\\")\\\n\n        messages.append({\\\"role\\\": \\\"user\\\", \\\"content\\\": query})\\\n\n        payload = {\\\n            \\\"model\\\": self.selected_models[\\\"openrouter\\\"],\\\n            \\\"messages\\\": messages\\\n        }\\\n        async with aiohttp.ClientSession() as session:\\\n            try:\\\n                async with session.post(url, json=payload, headers=headers) as response:\\\n                    if response.status != 200:\\\n                        error_text = await response.text()\\\n                        await utils.answer(message, f\\\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenRouter: Status {response.status}: {error_text[:200]}...\\\")\\\n                        return\\\n                    data = await response.json()\\\n                    answer = data[\\\"choices\\\"][0][\\\"message\\\"][\\\"content\\\"]\\\n                    await utils.answer(message, f\\\"<b>OpenRouter ({self.selected_models[\\\'openrouter\\\']}):</b>\\\\n{answer}\\\")\\\n                    # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–∫–ª—é—á–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò –≤ –∏—Å—Ç–æ—Ä–∏—é\n                    if str(message.chat_id) in self.chat_contexts and self.chat_contexts[str(message.chat_id)]:\\\n                        self.chat_histories[str(message.chat_id)].append({\\\"role\\\": \\\"model\\\", \\\"content\\\": answer})\\\n                        self.db.set(self.strings[\\\"name\\\"], \\\"chat_histories\\\", self.chat_histories) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î\n            except Exception as e:\\\n                await utils.answer(message, f\\\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenRouter: {str(e)}\\\")\\\n\n    async def _ask_onlysq(self, message, query, history=[], media_path=None): # New function for OnlySq\n        api_key = self.config[\\\"ONLYSQ_API_KEY\\\"]\\\n        if not api_key:\\\n            await utils.answer(message, \\\"API-–∫–ª—é—á –¥–ª—è OnlySq –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>.setkey {{gemini,openrouter,onlysq}} &lt;–≤–∞—à_–∫–ª—é—á&gt;</code>.\\\")\\\n            return\\\n        \\\n        client = AsyncOpenAI(\\\n            base_url=\\\"https://api.onlysq.ru/ai/openai\\\",\\\n            api_key=api_key,\\\n        )\\\n\n        messages = []\\\n        for msg in history:\\\n            messages.append({\\\"role\\\": msg[\\\"role\\\"], \\\"content\\\": msg[\\\"content\\\"]})\\\n\n        content_parts = []\\\n        if query:\\\n            content_parts.append({\\\"type\\\": \\\"text\\\", \\\"text\\\": query})\\\n        \\\n        if media_path: # Check for image media\n            try:\\\n                with open(media_path, \\\"rb\\\") as f:\\\n                    encoded_media = base64.b64encode(f.read()).decode(\\\'utf-8\\\')\\\n                mime_type, _ = mimetypes.guess_type(media_path)\\\n                if mime_type and mime_type.startswith(\\\'image/\\\'):\\\n                    content_parts.append({\\\"type\\\": \\\"image_url\\\", \\\"image_url\\\": {\\\"url\\\": f\\\"data:{mime_type};base64,{encoded_media}\\\"}})\\\n                else:\\\n                    await utils.answer(message, \\\"OnlySq: –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ (–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ). –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞.\\\")\\\n            except Exception as e:\\\n                await utils.answer(message, f\\\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –¥–ª—è OnlySq: {str(e)}\\\")\\\n                return\\\n\n        if not content_parts:\\\n            await utils.answer(message, \\\"OnlySq: –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —á–∞—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞ (–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –º–µ–¥–∏–∞).\\\")\\\\\n            return\\\n\n        messages.append({\\\"role\\\": \\\"user\\\", \\\"content\\\": content_parts})\\\n\n        try:\\\n            completion = await client.chat.completions.create(\\\n                model=self.selected_models[\\\"onlysq\\\"],\\\n                messages=messages,\\\n            )\\\n            answer = completion.choices[0].message.content\\\n            await utils.answer(message, f\\\"<b>OnlySq ({self.selected_models[\\\'onlysq\\\']}):</b>\\\\n{answer}\\\")\\\n            if str(message.chat_id) in self.chat_contexts and self.chat_contexts[str(message.chat_id)]:\\\n                self.chat_histories[str(message.chat_id)].append({\\\"role\\\": \\\"model\\\", \\\"content\\\": answer})\\\n                self.db.set(self.strings[\\\"name\\\"], \\\"chat_histories\\\", self.chat_histories) # Save to DB\n        except Exception as e:\\\n            await utils.answer(message, f\\\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OnlySq: {str(e)}\\\")\\\n\n    async def chatcmd(self, message):\\\n        \\\"\\\"\\\"–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.\\\"\\\"\\\"\\\n        chat_id = str(message.chat_id)\\\n        if chat_id not in self.chat_contexts:\\\n            self.chat_contexts[chat_id] = False # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–µ–Ω\n\n        self.chat_contexts[chat_id] = not self.chat_contexts[chat_id] # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n        self.db.set(self.strings[\\\"name\\\"], \\\"chat_contexts\\\", self.chat_contexts) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î\n\n        status = \\\"–≤–∫–ª—é—á–µ–Ω\\\" if self.chat_contexts[chat_id] else \\\"–≤—ã–∫–ª—é—á–µ–Ω\\\"\\\n        await utils.answer(message, f\\\"–†–µ–∂–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ {status}.\\\")\\\n\n    async def clearchatcmd(self, message):\\\n        \\\"\\\"\\\"–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞.\\\"\\\"\\\"\\\n        chat_id = str(message.chat_id)\\\n        if chat_id in self.chat_histories:\\\n            del self.chat_histories[chat_id]\\\n            self.db.set(self.strings[\\\"name\\\"], \\\"chat_histories\\\", self.chat_histories)\\\n            await utils.answer(message, \\\"–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞.\\\")\\\n        else:\\\n            await utils.answer(message, \\\"–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —É–∂–µ –ø—É—Å—Ç–∞.\\\")\\\n\n    # async def _clear_chat_history_callback(self, call):\\\n    #     \\\"\\\"\\\"Callback –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞.\\\"\\\"\\\"\\\n    #     chat_id = str(call.chat_id)\\\n    #     if chat_id in self.chat_histories:\\\n    #         del self.chat_histories[chat_id]\\\n    #         self.db.set(self.strings[\\\"name\\\"], \\\"chat_histories\\\", self.chat_histories)\\\n    #         await call.edit(\\\"–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞.\\\", reply_markup=None)\\\n    #     else:\\\n    #         await call.edit(\\\"–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —É–∂–µ –ø—É—Å—Ç–∞.\\\", reply_markup=None)\\\n\n    async def imgcmd(self, message):\\\n        \\\"\\\"\\\"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é OnlySq. –ü—Ä–∏–º–µ—Ä: .img –≤–∞—à –∑–∞–ø—Ä–æ—Å\\\"\\\"\\\"\\\n        query = utils.get_args_raw(message).strip()\\\n        if not query:\\\n            await utils.answer(message, \\\"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: <code>.img –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞ –ø–ª—è–∂–µ</code>\\\")\\\n            return\\\n\n        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞\n        processing_message = await utils.answer(message, \\\"üß† –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω...\\\")\\\n\n        image_path = await self._generate_image_onlysq(message, query)\\\n\n        if processing_message:\\\n            await processing_message.delete()\\\n\n        if image_path:\\\n            try:\\\n                await self.client.send_file(\\\n                    message.chat_id,\\\n                    image_path,\\\n                    caption=f\\\"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: <i>{query}</i>\\\",\\\n                    reply_to=message.id\\\n                )\\\n            except Exception as e:\\\n                await utils.answer(message, f\\\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}\\\")\\\n            finally:\\\n                if os.path.exists(image_path):\\\n                    os.remove(image_path)\\\n        else:\\\n            await utils.answer(message, \\\"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\\\")\\\n\n    async def _generate_image_onlysq(self, message, prompt):\\\n        \\\"\\\"\\\"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é OnlySq API.\\\"\\\"\\\"\\\n        api_key = self.config[\\\"ONLYSQ_API_KEY\\\"]\\\n        if not api_key:\\\n            api_key = \\\"openai\\\" # Use \\\"openai\\\" as default if key is empty\n\\\n        image_model = self.config[\\\"ONLYSQ_IMAGE_MODEL\\\"]\\\n        url = \\\"https://api.onlysq.ru/ai/imagen\\\"\\\n        headers = {\\\"Content-Type\\\": \\\"application/json\\\"}\\\n\n        payload = {\\\n            \\\"model\\\": image_model,\\\n            \\\"prompt\\\": prompt,\\\n            \\\"width\\\": 1024, # Default width\n            \\\"height\\\": 1024, # Default height\n            \\\"count\\\": 1 # Number of images to generate\n        }\\\n\n        try:\\\n            async with aiohttp.ClientSession() as session:\\\n                async with session.post(url, json=payload, headers=headers) as response:\\\n                    if response.status != 200:\\\n                        error_text = await response.text()\\\n                        await utils.answer(message, f\\\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç OnlySq (HTTP): Status {response.status}: {error_text[:200]}...\\\")\\\n                        return None\\\n                    \\\n                    data = await response.json()\\\n                    if data and \\\"files\\\" in data and data[\\\"files\\\"]:\\\n                        # Get the first image from the list of files (base64 encoded)\\\n                        encoded_image = data[\\\"files\\\"][0]\\\n                        decoded_image = base64.b64decode(encoded_image)\\\n\n                        # Save to a temporary file\n                        temp_image_path = os.path.join(tempfile.gettempdir(), \\\"generated_image.png\\\")\\\n                        with open(temp_image_path, \\\"wb\\\") as f:\\\n                            f.write(decoded_image)\\\n                        \\\n                        return temp_image_path\\\n                    else:\\\n                        await utils.answer(message, \\\"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç OnlySq.\\\")\\\n                        return None\\\n        except Exception as e:\\\n            await utils.answer(message, f\\\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OnlySq Imagen API: {str(e)}\\\")\\\n            return None\\n