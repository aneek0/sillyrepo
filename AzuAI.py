import aiohttp
from .. import loader, utils
from telethon import events

@loader.tds
class AzuAI(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏ Gemini –∏ OpenRouter —Å –≤—ã–±–æ—Ä–æ–º –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏"""
    strings = {
        "name": "AzuAI"
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            "GEMINI_API_KEY", "", "API-–∫–ª—é—á –¥–ª—è Gemini AI",
            "OPENROUTER_API_KEY", "", "API-–∫–ª—é—á –¥–ª—è OpenRouter",
            "DEFAULT_PROVIDER", 1, "–ü—Ä–æ–≤–∞–π–¥–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1 - Gemini, 2 - OpenRouter"
        )
        self.selected_models = {"gemini": "gemini-2.5-flash-preview-05-20", "openrouter": "meta-llama/llama-3.1-8b-instruct:free"}
        self.model_lists = {"gemini": [], "openrouter": []}
        self.chat_contexts = {} # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ —á–∞—Ç–∞–º
        self.chat_histories = {} # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ —á–∞—Ç–∞–º

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.chat_contexts = self.db.get(self.strings["name"], "chat_contexts", {})
        self.chat_histories = self.db.get(self.strings["name"], "chat_histories", {})
        await self._fetch_models()

    async def _fetch_models(self):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ Gemini –∏ OpenRouter"""
        # Gemini
        if self.config["GEMINI_API_KEY"]:
            url = f"https://generativelanguage.googleapis.com/v1beta/models?key={self.config['GEMINI_API_KEY']}"
            async with aiohttp.ClientSession() as session:
                try:
                    async with session.get(url) as response:
                        if response.status == 200:
                            data = await response.json()
                            self.model_lists["gemini"] = [model["name"] for model in data.get("models", [])]
                            # –î–æ–±–∞–≤–∏–º –ª–æ–≥ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π
                            print("–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –º–æ–¥–µ–ª–∏ Gemini")
                            # –î–æ–±–∞–≤–∏–º –≤—ã–≤–æ–¥ —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                            print(f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ Gemini Models (status 200): {data}")
                        else:
                            # –î–æ–±–∞–≤–∏–º –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π
                            error_text = await response.text()
                            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π Gemini. –°—Ç–∞—Ç—É—Å: {response.status}, –û—Ç–≤–µ—Ç: {error_text[:200]}...")
                            self.model_lists["gemini"] = []
                except Exception as e:
                    # –î–æ–±–∞–≤–∏–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
                    print(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π Gemini: {str(e)}")
                    self.model_lists["gemini"] = []
        else:
             print("API-–∫–ª—é—á Gemini –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π.")
             self.model_lists["gemini"] = []

        # OpenRouter (—Ç–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ)
        if self.config["OPENROUTER_API_KEY"]:
            url = "https://openrouter.ai/api/v1/models"
            headers = {"Authorization": f"Bearer {self.config['OPENROUTER_API_KEY']}"}
            async with aiohttp.ClientSession() as session:
                try:
                    async with session.get(url, headers=headers) as response:
                        if response.status == 200:
                            data = await response.json()
                            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏ OpenRouter
                            all_openrouter_models = [model["id"] for model in data.get("data", [])]
                            # –§–∏–ª—å—Ç—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø—Ä–µ—Ñ–∏–∫—Å–∞–º
                            self.model_lists["openrouter"] = [
                                model_id for model_id in all_openrouter_models
                                if model_id.startswith('google/') or model_id.startswith('deepseek/') or model_id.startswith('meta-llama/')
                            ]
                            print("–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –≤—Å–µ –º–æ–¥–µ–ª–∏ OpenRouter.")
                            print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π –¥–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(all_openrouter_models)}")
                            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π OpenRouter –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(self.model_lists['openrouter'])}")
                            # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                            print("–°–ø–∏—Å–æ–∫ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π OpenRouter:")
                            for model_id in self.model_lists["openrouter"]:
                                print(f"- {model_id}")
                            print(f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ OpenRouter Models (status 200): {data}")
                        else:
                            error_text = await response.text()
                            # –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –¥–ª—è OpenRouter
                            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π OpenRouter. –°—Ç–∞—Ç—É—Å: {response.status}, –û—Ç–≤–µ—Ç: {error_text}")
                            self.model_lists["openrouter"] = []
                except Exception as e:
                    # –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è OpenRouter
                    print(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π OpenRouter: {str(e)}")
                    self.model_lists["openrouter"] = []
        else:
            print("API-–∫–ª—é—á OpenRouter –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π.")
            self.model_lists["openrouter"] = []

    def _create_model_buttons(self, service):
        """–°–æ–∑–¥–∞—Ç—å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
        buttons = []
        models = self.model_lists.get(service, [])
        if not models:
            return []
        for model in models:
            buttons.append([{"text": model, "callback": self._set_model, "args": (service, model)}])
        buttons.append([{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback": self._back_to_services}])
        return buttons

    async def aicfgcmd(self, message):
        """‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏ –º–æ–¥–µ–ª—å, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å API-–∫–ª—é—á–∏ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥—É–ª—è"""
        await self.inline.form(
            text="‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ AIModule:</b>\n\nAPI-–∫–ª—é—á–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª—è (—á–µ—Ä–µ–∑ —Ñ–∞–π–ª –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã setkey, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã).",
            message=message,
            reply_markup=[
                [{"text": "–í—ã–±–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞", "callback": self._show_providers}],
                [{"text": "–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏", "callback": self._show_service_for_model}],
                [{"text": "‚ùå –ó–∞–∫—Ä—ã—Ç—å", "callback": self._close_form}]
            ]
        )

    async def _show_providers(self, call):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        await call.edit(
            "üîß <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:</b>",
            reply_markup=[
                [{"text": "Gemini", "callback": self._set_provider, "args": (1,)}],
                [{"text": "OpenRouter", "callback": self._set_provider, "args": (2,)}],
                [{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback": self._back_to_aicfg}, {"text": "‚ùå –ó–∞–∫—Ä—ã—Ç—å", "callback": self._close_form}]
            ]
        )

    async def _set_provider(self, call, provider_id):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏"""
        self.config["DEFAULT_PROVIDER"] = provider_id
        provider_name = "Gemini" if provider_id == 1 else "OpenRouter"
        await call.edit(f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {provider_name}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é aicfg, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—è —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await call.edit(
            text="‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ AIModule:</b>\n\nAPI-–∫–ª—é—á–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª—è (—á–µ—Ä–µ–∑ —Ñ–∞–π–ª –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã setkey, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã).",
            reply_markup=[
                [{"text": "–í—ã–±–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞", "callback": self._show_providers}],
                [{"text": "–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏", "callback": self._show_service_for_model}],
                [{"text": "‚ùå –ó–∞–∫—Ä—ã—Ç—å", "callback": self._close_form}]
            ]
        )

    async def _show_service_for_model(self, call):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
        await call.edit(
            "üîß <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏:</b>",
            reply_markup=[
                [{"text": "Gemini", "callback": self._show_models, "args": ("gemini",)}],
                [{"text": "OpenRouter", "callback": self._show_models, "args": ("openrouter",)}],
                [{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback": self._back_to_aicfg}, {"text": "‚ùå –ó–∞–∫—Ä—ã—Ç—å", "callback": self._close_form}]
            ]
        )

    async def _show_models(self, call, service):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
        models = self.model_lists.get(service, [])
        if not models:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –º–æ–¥–µ–ª–∏, –µ—Å–ª–∏ –º–æ–¥–µ–ª–µ–π –Ω–µ—Ç
            await call.edit(f"‚ö†Ô∏è <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è {service}.</b> –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API-–∫–ª—é—á –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º call.inline_message –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await self._show_service_for_model(call)
            return
        buttons = []
        for model in models:
            buttons.append([{"text": model, "callback": self._set_model, "args": (service, model)}])
        buttons.append([
            {"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback": self._show_service_for_model},
            {"text": "‚ùå –ó–∞–∫—Ä—ã—Ç—å", "callback": self._close_form}
        ]) # –ö–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ –∏ –ó–∞–∫—Ä—ã—Ç—å –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
        await call.edit(
            f"üîß <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è {service}:</b>",
            reply_markup=buttons
        )

    async def _set_model(self, call, service, model):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –∏–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏"""
        self.selected_models[service] = model
        await call.edit(f"‚úÖ <b>–ú–æ–¥–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞:</b> {model}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –º–æ–¥–µ–ª–∏, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—è —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await call.edit(
            "üîß <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏:</b>",
            reply_markup=[
                [{"text": "Gemini", "callback": self._show_models, "args": ("gemini",)}],
                [{"text": "OpenRouter", "callback": self._show_models, "args": ("openrouter",)}],
                [{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback": self._back_to_aicfg}],
                [{"text": "‚ùå –ó–∞–∫—Ä—ã—Ç—å", "callback": self._close_form}]
            ]
        )

    async def _back_to_aicfg(self, call):
        """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ AIModule"""
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é aicfg, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—è —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await call.edit(
            text="‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ AIModule:</b>\n\nAPI-–∫–ª—é—á–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª—è (—á–µ—Ä–µ–∑ —Ñ–∞–π–ª –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã setkey, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã).",
            reply_markup=[
                [{"text": "–í—ã–±–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞", "callback": self._show_providers}],
                [{"text": "–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏", "callback": self._show_service_for_model}],
                [{"text": "‚ùå –ó–∞–∫—Ä—ã—Ç—å", "callback": self._close_form}]
            ]
        )

    async def _close_form(self, call):
        """–ó–∞–∫—Ä—ã—Ç—å –∏–Ω–ª–∞–π–Ω-—Ñ–æ—Ä–º—É (—É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏)"""
        await call.delete()

    async def askcmd(self, message):
        """–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò. –ü—Ä–∏–º–µ—Ä: .ask –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å .ask"""
        query = utils.get_args_raw(message).strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º
        if not query and message.is_reply:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—Ç–∏–ª–∏
                reply_message = await message.get_reply_message()
                if reply_message and reply_message.text:
                    query = reply_message.text.strip()
            except Exception as e:
                await utils.answer(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
                return

        if not query:
            await utils.answer(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü—Ä–∏–º–µ—Ä: <code>.ask –≤–∞—à –≤–æ–ø—Ä–æ—Å</code>")
            return
        service = "gemini" if self.config["DEFAULT_PROVIDER"] == 1 else "openrouter"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        # processing_message = await utils.answer(message, "üß† –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...") # –£–¥–∞–ª–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ

        chat_id = str(message.chat_id)
        is_context_enabled = self.chat_contexts.get(chat_id, False)
        history = self.chat_histories.get(chat_id, [])

        if is_context_enabled:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            history.append({"role": "user", "content": query})
            self.chat_histories[chat_id] = history

        # –õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞, —Ç.–∫. Gemini —Å–∞–º —Ä–µ—à–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ Grounding (–ø–æ–∏—Å–∫)

        ai_response_message = None
        if service == "gemini":
            ai_response_message = await self._ask_gemini(message, query, history if is_context_enabled else []) # –ü–µ—Ä–µ–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–∫–ª—é—á–µ–Ω
        else:
            ai_response_message = await self._ask_openrouter(message, query, history if is_context_enabled else []) # –ü–µ—Ä–µ–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–∫–ª—é—á–µ–Ω

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞..."
        # if processing_message:
        #     await processing_message.delete() # –£–¥–∞–ª–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ

        # –ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –ò–ò, –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–∫–ª—é—á–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–∞
        # if is_context_enabled and ai_response_message:
        #     await self.inline.form(
        #         text=ai_response_message.text, # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ò–ò
        #         message=ai_response_message, # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ —Å–æ–æ–±—â–µ–Ω–∏—é —Å –æ—Ç–≤–µ—Ç–æ–º –ò–ò
        #         reply_markup=[[{"text": "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥", "callback": self._clear_chat_history_callback}]],
        #         disable_security=True # –†–∞–∑—Ä–µ—à–∞–µ–º –±–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
        #     )

    async def _ask_gemini(self, message, query, history=[]): # –î–æ–±–∞–≤–ª—è–µ–º history –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
        api_key = self.config["GEMINI_API_KEY"]
        if not api_key:
            await utils.answer(message, "API-–∫–ª—é—á –¥–ª—è Gemini –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>.setkey {{gemini,openrouter}} &lt;–≤–∞—à_–∫–ª—é—á&gt;</code>.")
            return

        # –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å Gemini API —á–µ—Ä–µ–∑ HTTP —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Grounding
        model_id = self.selected_models['gemini'].replace('models/', '')
        url = f"https://generativelanguage.googleapis.com/v1beta/models/{model_id}:generateContent?key={api_key}"
        headers = {"Content-Type": "application/json"}

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        contents = []
        for msg in history:
            contents.append({"role": msg["role"], "parts": [{"text": msg["content"]}]})
        contents.append({"role": "user", "parts": [{"text": query}]}) # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        payload = {
            "contents": contents,
            "tools": [
                {
                    "googleSearch": {} # –û—Å—Ç–∞–≤–ª—è–µ–º Grounding –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
                }
            ]
        }

        async with aiohttp.ClientSession() as session:
            try:
                async with session.post(url, json=payload, headers=headers) as response:
                    if response.status != 200:
                        error_text = await response.text()
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                        await utils.answer(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini (HTTP): Status {response.status}: {error_text[:200]}...")
                        return
                    data = await response.json()

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
                    if data and "candidates" in data and data["candidates"]:
                         answer_parts = []
                         for part in data["candidates"][0]["content"]["parts"]:
                              if "text" in part:
                                   answer_parts.append(part["text"])
                              if "groundingAttributions" in part:
                                   for attribution in part["groundingAttributions"]:
                                        if "uri" in attribution:
                                             answer_parts.append(f" [[{attribution.get('title', '—Å—Å—ã–ª–∫–∞')}]]({attribution['uri']})")

                         answer = "".join(answer_parts)

                         if not answer:
                             if data["candidates"][0].get("finishReason") == "SAFETY" or data["candidates"][0].get("blockReason"):
                                  block_reason = data["candidates"][0].get("blockReason") or data["candidates"][0].get("finishReason")
                                  await utils.answer(message, f"‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –∫ Gemini –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {block_reason}")
                             else:
                                  await utils.answer(message, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini (HTTP): –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")
                         else:
                             await utils.answer(message, f"<b>Gemini ({self.selected_models['gemini']}):</b>\n{answer}")
                             # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–∫–ª—é—á–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò –≤ –∏—Å—Ç–æ—Ä–∏—é
                             if str(message.chat_id) in self.chat_contexts and self.chat_contexts[str(message.chat_id)]:
                                self.chat_histories[str(message.chat_id)].append({"role": "model", "content": answer})
                                self.db.set(self.strings["name"], "chat_histories", self.chat_histories) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                             # return await utils.answer(message, f"<b>Gemini ({self.selected_models['gemini']}):</b>\n{answer}") # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º

                    elif data and "promptFeedback" in data and data["promptFeedback"].get("blockReason"):
                         block_reason = data["promptFeedback"]["blockReason"]
                         await utils.answer(message, f"‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –∫ Gemini –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {block_reason}")
                    else:
                         await utils.answer(message, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini (HTTP): –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API")

            except Exception as e:
                await utils.answer(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini (HTTP): {str(e)}")

    async def _ask_openrouter(self, message, query, history=[]): # –î–æ–±–∞–≤–ª—è–µ–º history –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
        api_key = self.config["OPENROUTER_API_KEY"]
        if not api_key:
            await utils.answer(message, "API-–∫–ª—é—á –¥–ª—è OpenRouter –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>.setkey {{gemini,openrouter}} &lt;–≤–∞—à_–∫–ª—é—á&gt;</code>.")
            return
        url = "https://openrouter.ai/api/v1/chat/completions"
        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        messages = []
        for msg in history:
            messages.append({"role": msg["role"], "content": msg["content"]})
        messages.append({"role": "user", "content": query}) # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        payload = {
            "model": self.selected_models["openrouter"],
            "messages": messages
        }
        async with aiohttp.ClientSession() as session:
            try:
                async with session.post(url, json=payload, headers=headers) as response:
                    if response.status != 200:
                        error_text = await response.text()
                        await utils.answer(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenRouter: Status {response.status}: {error_text[:200]}...")
                        return
                    data = await response.json()
                    answer = data["choices"][0]["message"]["content"]
                    await utils.answer(message, f"<b>OpenRouter ({self.selected_models['openrouter']}):</b>\n{answer}")
                    # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–∫–ª—é—á–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò –≤ –∏—Å—Ç–æ—Ä–∏—é
                    if str(message.chat_id) in self.chat_contexts and self.chat_contexts[str(message.chat_id)]:
                        self.chat_histories[str(message.chat_id)].append({"role": "model", "content": answer})
                        self.db.set(self.strings["name"], "chat_histories", self.chat_histories) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                    # return await utils.answer(message, f"<b>OpenRouter ({self.selected_models['openrouter']}):</b>\n{answer}") # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º
            except Exception as e:
                await utils.answer(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenRouter: {str(e)}")

    async def chatcmd(self, message):
        """–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞."""
        chat_id = str(message.chat_id)
        if chat_id not in self.chat_contexts:
            self.chat_contexts[chat_id] = False # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–µ–Ω

        self.chat_contexts[chat_id] = not self.chat_contexts[chat_id] # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.db.set(self.strings["name"], "chat_contexts", self.chat_contexts) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î

        status = "–≤–∫–ª—é—á–µ–Ω" if self.chat_contexts[chat_id] else "–≤—ã–∫–ª—é—á–µ–Ω"
        await utils.answer(message, f"–†–µ–∂–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ {status}.")

    async def clearchatcmd(self, message):
        """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞."""
        chat_id = str(message.chat_id)
        if chat_id in self.chat_histories:
            del self.chat_histories[chat_id]
            self.db.set(self.strings["name"], "chat_histories", self.chat_histories)
            await utils.answer(message, "–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞.")
        else:
            await utils.answer(message, "–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —É–∂–µ –ø—É—Å—Ç–∞.")

    # async def _clear_chat_history_callback(self, call):
    #     """Callback –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞."""
    #     chat_id = str(call.chat_id)
    #     if chat_id in self.chat_histories:
    #         del self.chat_histories[chat_id]
    #         self.db.set(self.strings["name"], "chat_histories", self.chat_histories)
    #         await call.edit("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞.", reply_markup=None)
    #     else:
    #         await call.edit("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —É–∂–µ –ø—É—Å—Ç–∞.", reply_markup=None)