# meta developer: Azu-nyyyyyyaaaaan
# üîê This code is licensed under CC-BY-NC Licence! - https://creativecommons.org/licenses/by-nc/4.0/

import requests
import asyncio
import os
from telethon.tl.functions.users import GetFullUserRequest
from telethon.tl.functions.channels import GetFullChannelRequest
from telethon.tl.types import Message, Channel
from telethon.errors.rpcerrorlist import YouBlockedUserError
from telethon import Button
from .. import loader, utils

def get_creation_date(user_id: int) -> str:
    url = "https://restore-access.indream.app/regdate"
    headers = {
        "accept": "*/*",
        "content-type": "application/x-www-form-urlencoded",
        "user-agent": "Nicegram/92 CFNetwork/1390 Darwin/22.0.0",
        "x-api-key": "e758fb28-79be-4d1c-af6b-066633ded128",
        "accept-language": "en-US,en;q=0.9",
    }
    data = {"telegramId": user_id}
    response = requests.post(url, headers=headers, json=data)
    if response.status_code == 200 and "data" in response.json():
        return response.json()["data"]["date"]
    else:
        return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"

@loader.tds
class UserInfoMod(loader.Module):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–ª–∏ –∫–∞–Ω–∞–ª–µ Telegram, –≤–∫–ª—é—á–∞—è –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ –§–∞–Ω—Å—Ç–∞—Ç–∞"""

    strings = {
        "name": "UserInfo",
        "loading": "üïê <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</b>",
        "not_chat": "üö´ <b>–≠—Ç–æ –Ω–µ —á–∞—Ç!</b>",
        "unblock_bot": "‚ùó –†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ @Funstatlol_bot –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
        "timeout": "‚ö†Ô∏è –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç @Funstatlol_bot –∏—Å—Ç–µ–∫–ª–æ.",
        "invalid_id": "‚ùó <b>–ù–µ–≤–µ—Ä–Ω—ã–π ID!</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ ID.",
    }

    async def userinfocmd(self, message: Message):
        args = utils.get_args_raw(message)
        reply = await message.get_reply_message()
        await utils.answer(message, self.strings("loading"))
        if args.isdigit():
            user_or_channel_id = int(args)
        elif args:
            user_or_channel_id = args
        else:
            user_or_channel_id = reply.sender_id if reply else None
        
        if not user_or_channel_id:
            await utils.answer(message, "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∏–ª–∏ @—é–∑–µ—Ä–Ω–µ–π–º.")
            return

        try:
            entity = await self._client.get_entity(user_or_channel_id)
        except Exception as e:
            await utils.answer(message, f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∫–∞–Ω–∞–ª: {e}")
            return

        if isinstance(entity, Channel):
            await self.process_channel_info(entity, message)
        else:
            await self.process_user_info(entity, message)

    async def process_user_info(self, user_ent, message):
        user = await self._client(GetFullUserRequest(user_ent.id))
        registration_date = get_creation_date(user_ent.id)
        funstat_info = await self.get_funstat_info(user_ent.id)

        user_info = (
            "<b>üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>\n\n"
            f"<b>–ò–º—è:</b> <code>{user_ent.first_name or 'üö´'}</code>\n"
            f"<b>–§–∞–º–∏–ª–∏—è:</b> <code>{user_ent.last_name or 'üö´'}</code>\n"
            f"<b>–Æ–∑–µ—Ä–Ω–µ–π–º:</b> @{user_ent.username or 'üö´'}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{user.full_user.about or 'üö´'}\n\n"
            f"<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> <code>{registration_date}</code>\n"
            f"<b>–û–±—â–∏–µ —á–∞—Ç—ã:</b> <code>{user.full_user.common_chats_count}</code>\n"
            f"<b>ID:</b> <code>{user_ent.id}</code>\n"
        )

        if user_ent.username:
            user_info += f'<b><a href="tg://user?id={user_ent.id}">üåê –í–µ—á–Ω–∞—è —Å—Å—ã–ª–∫–∞</a></b>\n\n'
        else:
            user_info += "–í–µ—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.\n\n"

        user_info += f"<b>üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ <a href='https://t.me/Funstatlol_bot'>–§–∞–Ω—Å—Ç–∞—Ç–∞</a>:</b>\n{funstat_info}"

        photo = await self._client.download_profile_photo(user_ent.id)

        if photo:
            await self._client.send_file(
                message.chat_id,
                file=photo,
                caption=user_info,
                buttons=[
                    [Button.inline("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", data=f"refresh:{user_ent.id}")]
                ]
            )

            try:
                os.remove(photo)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞: {e}")

        else:
            await self._client.send_message(message.chat_id, user_info)

        await message.delete()

    async def process_channel_info(self, channel_ent, message):
        channel = await self._client(GetFullChannelRequest(channel_ent))
        description = channel.full_chat.about or "üö´"
        creation_date = get_creation_date(channel_ent.id)
        subscriber_count = channel.full_chat.participants_count

        channel_info = (
            "<b>üì£ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ:</b>\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> <code>{channel_ent.title}</code>\n"
            f"<b>–Æ–∑–µ—Ä–Ω–µ–π–º:</b> @{channel_ent.username or 'üö´'}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{description}\n\n"
            f"<b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> <code>{creation_date}</code>\n"
            f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:</b> <code>{subscriber_count}</code>\n"
            f"<b>ID:</b> <code>{channel_ent.id}</code>\n"
        )

        if channel_ent.username:
            channel_info += f'<b><a href="https://t.me/{channel_ent.username}">–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª</a></b>\n\n'
        else:
            channel_info += "–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.\n\n"

        photo = await self._client.download_profile_photo(channel_ent.id)

        if photo:
            await self._client.send_file(
                message.chat_id,
                file=photo,
                caption=channel_info,
                buttons=[
                    [Button.inline("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", data=f"refresh:{channel_ent.id}")]
                ]
            )

            try:
                os.remove(photo)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞: {e}")

        else:
            await self._client.send_message(message.chat_id, channel_info)

        await message.delete()

    async def get_funstat_info(self, user_id: int) -> str:
        chat = "@Funstatlol_bot"
        attempts = 3
        for attempt in range(attempts):
            try:
                await self._client.send_message(chat, str(user_id))
                await asyncio.sleep(5)
                messages = await self._client.get_messages(chat, limit=5)
                for message in messages:
                    if f"üë§ {user_id}" in message.text or str(user_id) in message.text:
                        lines = message.text.split("\n")
                        filtered_lines = [
                            line for line in lines if "ID:" not in line and "–≠—Ç–æ" not in line
                        ]
                        return "\n".join(filtered_lines)

                await asyncio.sleep(1)

            except YouBlockedUserError:
                return self.strings("unblock_bot")
            except Exception as e:
                return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}"

        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç @Funstatlol_bot"

