# meta developer: Azu-nyyyyyyaaaaan
# üîê This code is licensed under CC-BY-NC Licence! - https://creativecommons.org/licenses/by-nc/4.0/

from .. import loader, utils
import aiohttp

@loader.tds
class AzuWeatherMod(loader.Module):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã —á–µ—Ä–µ–∑ OpenWeatherMap —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ —ç–º–æ–¥–∑–∏"""
    strings = {
        "name": "AzuWeather",
        "no_api_key": "<emoji document_id=5210952531676504517>‚ùå</emoji> –£–∫–∞–∂–∏ API-–∫–ª—é—á OpenWeatherMap –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö (.config AzuWeather api_key <–∫–ª—é—á>)",
        "no_city": "<emoji document_id=5210952531676504517>‚ùå</emoji> –£–∫–∞–∂–∏ –≥–æ—Ä–æ–¥! –ü—Ä–∏–º–µ—Ä: .weather –ú–æ—Å–∫–≤–∞ –∏–ª–∏ .weather -f –ú–æ—Å–∫–≤–∞",
        "city_not_found": "<emoji document_id=5210952531676504517>‚ùå</emoji> –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "api_key",
                None,
                lambda: "API-–∫–ª—é—á –æ—Ç OpenWeatherMap",
                validator=loader.validators.String()
            )
        )

    async def weathercmd(self, message):
        """–ö–æ–º–∞–Ω–¥–∞ .weather [-f] <–≥–æ—Ä–æ–¥> - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–≥–æ–¥—É (—Å -f –¥–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π)"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings["no_city"])
            return

        if not self.config["api_key"]:
            await utils.answer(message, self.strings["no_api_key"])
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª–∞–≥–∞ -f
        forecast = "-f" in args
        city = args.replace("-f", "").strip()

        if not city:
            await utils.answer(message, self.strings["no_city"])
            return

        api_key = self.config["api_key"]

        # URL –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã
        current_url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric&lang=ru"
        # URL –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ 5 –¥–Ω–µ–π (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
        forecast_url = f"http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={api_key}&units=metric&lang=ru"

        async with aiohttp.ClientSession() as session:
            # –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞
            try:
                async with session.get(current_url) as resp:
                    if resp.status != 200:
                        await utils.answer(message, self.strings["city_not_found"])
                        return
                    data = await resp.json()

                temperature = round(data["main"]["temp"])
                feels_like = round(data["main"]["feels_like"])
                humidity = data["main"]["humidity"]
                wind_speed = data["wind"]["speed"]
                description = data["weather"][0]["description"].capitalize()
                city_name = data["name"]

                weather_info = (
                    f"<emoji document_id=5402477260982731644>‚òÄÔ∏è</emoji> –ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city_name.capitalize()}:\n"
                    f"<emoji document_id=5470049770997292425>üå°</emoji> –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n"
                    f"<emoji document_id=5393512611968995988>üíß</emoji> –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                    f"<emoji document_id=5449885771420934013>üçÉ</emoji> –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å\n"
                    f"<emoji document_id=5287571024500498635>‚òÅÔ∏è</emoji> –ù–µ–±–æ: {description}"
                )

                reply = weather_info

                # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π, –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–ª–∞–≥ -f
                if forecast:
                    async with session.get(forecast_url) as resp:
                        if resp.status == 200:
                            forecast_data = await resp.json()
                            days = {}
                            for item in forecast_data["list"]:
                                date = item["dt_txt"].split(" ")[0]
                                if date not in days and "12:00:00" in item["dt_txt"]:
                                    days[date] = item

                            for date, item in list(days.items())[:5]:
                                temp_min = item["main"]["temp_min"]
                                temp_max = item["main"]["temp_max"]
                                temp_avg = round((temp_min + temp_max) / 2)  # –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º
                                desc = item["weather"][0]["description"].capitalize()
                                forecast_info = (
                                    f"\n\n<emoji document_id=5431897022456145283>üìÜ</emoji> {date}:\n"
                                    f"<emoji document_id=5470049770997292425>üå°</emoji> –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp_avg}¬∞C\n"
                                    f"<emoji document_id=5287571024500498635>‚òÅÔ∏è</emoji> –ù–µ–±–æ: {desc}"
                                )
                                reply += forecast_info

                await utils.answer(message, reply)
            except Exception as e:
                await utils.answer(message, f"<emoji document_id=5210952531676504517>‚ùå</emoji> –û—à–∏–±–∫–∞: {str(e)}")