# meta developer: Azu-nyyyyyyaaaaan
# üîê This code is licensed under CC-BY-NC Licence! - https://creativecommons.org/licenses/by-nc/4.0/

from .. import loader, utils
import aiohttp
import re
import fitz  # pymupdf
from bs4 import BeautifulSoup

@loader.tds
class Rp(loader.Module):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä –∏ —Å—Ç–æ–ª–æ–≤–æ–π –¥–ª—è –≥—Ä—É–ø–ø—ã 2-–û–¢–°-1 —Å —Å–∞–π—Ç–∞ novkrp.ru"""
    strings = {
        "name": "Rp",
        "no_schedule": "<emoji document_id=5210952531676504517>‚ùå</emoji> –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã 2-–û–¢–°-1!",
        "no_canteen": "<emoji document_id=5210952531676504517>‚ùå</emoji> –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–æ–ª–æ–≤–æ–π! {error}",
        "loading": "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...",
        "schedule_found": "<emoji document_id=5431897022456145283>üìÜ</emoji> –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è 2-–û–¢–°-1 –Ω–∞ {date}:\n{pairs}",
        "canteen_loading": "<b>‚è≥ –ò–∑–≤–ª–µ–∫–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–æ–ª–æ–≤–æ–π –∏–∑ PDF...</b>",
        "temp_file_error": "<emoji document_id=5210952531676504517>‚ùå</emoji> –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º: {error}"
    }
    
    def __init__(self):
        pass
    
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
    DATE_PATTERN = re.compile(r"\d{2}\s[–∞-—è–ê-–Ø]+\s2025–≥\.")
    PAIR_NUMBER_PATTERN = re.compile(r"[^0-7]")
    GROUP_PATTERNS = [
        re.compile(r'2-–û–¢–°\s*-?\s*1', re.IGNORECASE),
        re.compile(r'2\s*-\s*–û–¢–°\s*-\s*1', re.IGNORECASE),
        re.compile(r'2-–û–¢–°-1', re.IGNORECASE),
        re.compile(r'2\s+–û–¢–°\s+1', re.IGNORECASE)
    ]
    TIME_PATTERN = re.compile(r'(\d+)\s+(\d{1,2}[:.]\d{2}\s*-\s*\d{1,2}[:.]\d{2})')
    OTHER_GROUPS_PATTERN = re.compile(r'\d+-[–ê-–Ø]+-\d+')

    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –¥–Ω–µ–π (–≤—Ç–æ—Ä–Ω–∏–∫-—Å—É–±–±–æ—Ç–∞)
    regular_pair_times = {
        "1": {"start": "08:30", "end": "09:40"},
        "2": {"start": "09:50", "end": "11:00"},
        "3": {"start": "11:10", "end": "12:20"},
        "4": {"start": "12:30", "end": "13:40"},
        "5": {"start": "13:50", "end": "15:00"},
        "6": {"start": "15:10", "end": "16:20"},
        "7": {"start": "16:30", "end": "17:40"}
    }

    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ (—Å –∫–ª–∞—Å—Å–Ω—ã–º —á–∞—Å–æ–º)
    monday_pair_times = {
        "–∫–ª–∞—Å—Å–Ω—ã–π_—á–∞—Å": {"start": "8:30", "end": "9:10"},
        "1": {"start": "9:10", "end": "10:20"},
        "2": {"start": "10:30", "end": "11:40"},
        "3": {"start": "11:50", "end": "13:00"},
        "4": {"start": "13:10", "end": "14:20"},
        "5": {"start": "14:30", "end": "15:40"},
        "6": {"start": "15:50", "end": "17:00"},
        "7": {"start": "17:10", "end": "18:20"}
    }

    def is_monday_schedule(self, date_text="", html_content=""):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞"""
        return any(keyword in (date_text + " " + html_content).lower() 
                  for keyword in ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "monday"])

    def get_pair_times(self, is_monday=False):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤"""
        return self.monday_pair_times if is_monday else self.regular_pair_times

    async def rpcmd(self, message):
        """–ö–æ–º–∞–Ω–¥–∞ .rp - –ø–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã 2-–û–¢–°-1"""
        await utils.answer(message, self.strings["loading"])

        try:
            async with aiohttp.ClientSession() as session:
                async with session.get("https://novkrp.ru/raspisanie.htm") as resp:
                    if resp.status != 200:
                        await utils.answer(message, self.strings["no_schedule"])
                        return
                    html = await resp.text()

            soup = BeautifulSoup(html, "html.parser")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É
            date_match = soup.find(string=self.DATE_PATTERN)
            date = re.sub(r"\s+", " ", re.sub(r"[,.]\s*", " ", date_match.strip())) if date_match else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –¥–∞—Ç—É"

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            is_monday = self.is_monday_schedule(date, html)
            pair_times = self.get_pair_times(is_monday)

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä—ã
            pairs = self._extract_pairs(soup, pair_times, is_monday)
            
            if not pairs or (is_monday and len(pairs) == 1):
                await utils.answer(message, self.strings["no_schedule"])
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            day_info = " (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - —Å –∫–ª–∞—Å—Å–Ω—ã–º —á–∞—Å–æ–º)" if is_monday else ""
            reply = self.strings["schedule_found"].format(
                date=date + day_info, 
                pairs="\n".join(pairs)
            )
            await utils.answer(message, reply)

        except Exception as e:
            await utils.answer(message, f"<emoji document_id=5210952531676504517>‚ùå</emoji> –û—à–∏–±–∫–∞: {str(e)}")

    def _extract_pairs(self, soup, pair_times, is_monday):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∞—Ä—ã –∏–∑ HTML"""
        pairs = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å–Ω—ã–π —á–∞—Å –¥–ª—è –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞
        if is_monday:
            class_time = pair_times["–∫–ª–∞—Å—Å–Ω—ã–π_—á–∞—Å"]
            pairs.append(f"–ö–ª–∞—Å—Å–Ω—ã–π —á–∞—Å ({class_time['start']}-{class_time['end']})")

        # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
        for table in soup.find_all("table"):
            rows = table.find_all("tr")
            if not rows:
                continue

            # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Å—Ç–æ–ª–±—Ü–∞ —Å –≥—Ä—É–ø–ø–æ–π
            headers = [cell.get_text(strip=True) for cell in rows[0].find_all(["th", "td"])]
            group_index = next((i for i, header in enumerate(headers) if "2-–û–¢–°-1" in header), -1)
            
            if group_index == -1:
                continue

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä—ã
            for row in rows[1:]:
                cells = row.find_all(["td", "th"])
                if len(cells) <= group_index:
                    continue

                pair_number = self.PAIR_NUMBER_PATTERN.sub("", cells[0].get_text(strip=True))
                if not pair_number:
                    continue

                pair_info = self._format_pair_info(cells[group_index].get_text(separator=" "))
                if pair_info:
                    pair_time = pair_times.get(pair_number, {"start": "–≤—Ä–µ–º—è", "end": "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"})
                    pairs.append(f"{pair_number} –ø–∞—Ä–∞ ({pair_time['start']}-{pair_time['end']}): {pair_info}")

        return pairs

    def _format_pair_info(self, text):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–µ"""
        if not text:
            return ""
        
        # –û—á–∏—â–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = " ".join(text.split())
        text = re.sub(r"([–∞-—è–ê-–Ø])([–ê-–Ø])", r"\1 \2", text)
        text = re.sub(r"([–∞-—è–ê-–Ø])\s*–ê—É–¥\.(\d+)", r"\1 –ê—É–¥.\2", text)
        return text

    async def stcmd(self, message):
        """–ò–∑–≤–ª–µ—á—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–æ–ª–æ–≤–æ–π –¥–ª—è –≥—Ä—É–ø–ø—ã 2-–û–¢–°-1 –∏–∑ PDF"""
        await utils.answer(message, self.strings["canteen_loading"])

        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ PDF
            full_text = await self._extract_pdf_text()
            if not full_text:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ PDF")
            
            # –ò—â–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã
            result = self._find_group_schedule(full_text)
            if result:
                await utils.answer(message, result)
            else:
                await utils.answer(message, "<b>‚ùå –ì—Ä—É–ø–ø–∞ 2-–û–¢–°-1 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ —Å—Ç–æ–ª–æ–≤–æ–π</b>")
        
        except Exception as e:
            await utils.answer(message, f"<b>‚ùå –û—à–∏–±–∫–∞:</b> {str(e)}")

    async def _extract_pdf_text(self):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ PDF —Ñ–∞–π–ª–∞ –∏—Å–ø–æ–ª—å–∑—É—è pymupdf"""
        pdf_url = "https://www.novkrp.ru/data/covid_pit.pdf"
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(pdf_url) as response:
                    response.raise_for_status()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É Content-Length
                    content_length = response.headers.get('content-length')
                    if content_length and int(content_length) > 10 * 1024 * 1024:  # 10 –ú–ë
                        raise Exception("PDF —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (>10 –ú–ë)")
                    
                    # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                    content_data = await response.read()
                    if len(content_data) > 10 * 1024 * 1024:  # 10 –ú–ë
                        raise Exception("PDF —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (>10 –ú–ë)")
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º pymupdf –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
                    try:
                        pdf_document = fitz.open(stream=content_data, filetype="pdf")
                        full_text = ""
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
                        for page_num in range(pdf_document.page_count):
                            page = pdf_document[page_num]
                            text = page.get_text()
                            if text:
                                full_text += text + "\n"
                        
                        pdf_document.close()
                        return full_text.strip()
                        
                    except Exception as e:
                        raise Exception(f"–û—à–∏–±–∫–∞ pymupdf: {str(e)}")
            
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ PDF: {str(e)}")

    def _find_group_schedule(self, full_text):
        """–ò—â–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã 2-–û–¢–°-1"""
        clean_text = re.sub(r'\s+', ' ', full_text)
        
        # –ò—â–µ–º –≥—Ä—É–ø–ø—É –∏ —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å –Ω–µ–π –≤—Ä–µ–º—è
        for pattern in self.GROUP_PATTERNS:
            match = pattern.search(clean_text)
            if match:
                # –ò—â–µ–º –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ –≥—Ä—É–ø–ø–æ–π
                text_before = clean_text[:match.start()]
                time_matches = list(self.TIME_PATTERN.finditer(text_before))
                
                if time_matches:
                    last_match = time_matches[-1]
                    found_number = last_match.group(1)
                    found_time = last_match.group(2)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ–∂–¥—É –≤—Ä–µ–º–µ–Ω–µ–º –∏ –≥—Ä—É–ø–ø–æ–π –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –≥—Ä—É–ø–ø
                    text_between = clean_text[last_match.end():match.start()]
                    other_groups = [g for g in self.OTHER_GROUPS_PATTERN.findall(text_between) 
                                  if not pattern.search(g)]
                    
                    if not other_groups:
                        return self._format_canteen_result(found_number, found_time)
        
        # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–æ–∫
        return self._find_context_schedule(full_text)

    def _find_context_schedule(self, full_text):
        """–ò—â–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–æ–∫"""
        lines = full_text.split('\n')
        
        for i, line in enumerate(lines):
            line_stripped = line.strip()
            if not line_stripped:
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞—à–∞ –≥—Ä—É–ø–ø–∞ –≤ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–µ
            if any(pattern.search(line_stripped) for pattern in self.GROUP_PATTERNS):
                # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–æ–∫
                context_start = max(0, i - 3)
                context_text = " ".join(lines[j].strip() for j in range(context_start, i + 1))
                
                # –ò—â–µ–º –≤—Ä–µ–º—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                time_matches = list(self.TIME_PATTERN.finditer(context_text))
                if time_matches:
                    last_match = time_matches[-1]
                    number = last_match.group(1)
                    time = last_match.group(2)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥—Ä—É–ø–ø–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–≤—è–∑–∞–Ω–∞ —Å —ç—Ç–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
                    after_time = context_text[last_match.end():].strip()
                    if any(pattern.search(after_time) for pattern in self.GROUP_PATTERNS):
                        groups_text = re.split(r'\d+\s+–ø–∞—Ä–∞|\d+\s+\d{1,2}[:.]\d{2}', after_time)[0].strip()
                        return self._format_canteen_result(number, time, groups_text)
        
        return None

    def _format_canteen_result(self, number, time, groups=""):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å—Ç–æ–ª–æ–≤–æ–π"""
        result_parts = [
            "<b>üçΩ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–æ–ª–æ–≤–æ–π –¥–ª—è –≥—Ä—É–ø–ø—ã 2-–û–¢–°-1:</b>\n",
            f"‚è∞ {number}. {time}"
        ]
        
        if groups:
            clean_groups = re.sub(r'\s+', ' ', groups).strip()
            if clean_groups:
                result_parts.append(f"üë• {clean_groups}")
        
        return "\n".join(result_parts)