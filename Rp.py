# meta developer: Azu-nyyyyyyaaaaan
# üîê This code is licensed under CC-BY-NC Licence! - https://creativecommons.org/licenses/by-nc/4.0/

from .. import loader, utils
import aiohttp
from bs4 import BeautifulSoup
import re
import requests
from io import BytesIO
from pdf2image import convert_from_bytes
from PIL import Image
import os # Import os for file operations
import asyncio # Import asyncio for sleep if needed

@loader.tds
class Rp(loader.Module):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä –∏ —Å—Ç–æ–ª–æ–≤–æ–π –¥–ª—è –≥—Ä—É–ø–ø—ã 2-–û–¢–°-1 —Å —Å–∞–π—Ç–∞ novkrp.ru"""
    strings = {
        "name": "Rp",
        "no_schedule": "<emoji document_id=5210952531676504517>‚ùå</emoji> –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã 1-–û–¢–°-1!",
        "no_canteen": "<emoji document_id=5210952531676504517>‚ùå</emoji> –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–æ–ª–æ–≤–æ–π! {error}",
        "loading": "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...",
        "schedule_found": "<emoji document_id=5431897022456145283>üìÜ</emoji> –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è 1-–û–¢–°-1 –Ω–∞ {date}:\n{pairs}",
        "canteen_loading": "<b>–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ PDF...</b>",
        "temp_file_error": "<emoji document_id=5210952531676504517>‚ùå</emoji> –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º: {error}"
    }

    # –í—Ä–µ–º—è –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã
    pair_times = {
        "1": {"start": "08:30", "end": "09:40"},
        "2": {"start": "09:50", "end": "11:00"},
        "3": {"start": "11:10", "end": "12:20"},
        "4": {"start": "12:30", "end": "13:40"},
        "5": {"start": "13:50", "end": "15:00"},
        "6": {"start": "15:10", "end": "16:20"}
    }

    async def rpcmd(self, message):
        """–ö–æ–º–∞–Ω–¥–∞ .rp - –ø–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã 1-–û–¢–°-1"""
        await utils.answer(message, self.strings["loading"])

        url = "https://novkrp.ru/raspisanie.htm"

        async with aiohttp.ClientSession() as session:
            try:
                async with session.get(url, timeout=15) as resp:
                    if resp.status != 200:
                        await utils.answer(message, self.strings["no_schedule"])
                        return
                    html = await resp.text()

                # –ü–∞—Ä—Å–∏–Ω–≥ HTML
                soup = BeautifulSoup(html, "html.parser")

                # –ò—â–µ–º –¥–∞—Ç—É
                date_match = soup.find(string=re.compile(r"\d{2}\s[–∞-—è–ê-–Ø]+\s2025–≥\."))
                if date_match:
                    date = re.sub(r"[,.]\s*", " ", date_match.strip())
                    date = re.sub(r"\s+", " ", date)
                else:
                    date = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –¥–∞—Ç—É"

                # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
                tables = soup.find_all("table")
                if not tables:
                    await utils.answer(message, self.strings["no_schedule"])
                    return

                pairs = []
                for table in tables:
                    rows = table.find_all("tr")
                    if not rows:
                        continue

                    # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    header_row = rows[0]
                    headers = [cell.get_text(strip=True) for cell in header_row.find_all(["th", "td"])]

                    # –ò—â–µ–º –∏–Ω–¥–µ–∫—Å —Å—Ç–æ–ª–±—Ü–∞ —Å –≥—Ä—É–ø–ø–æ–π
                    group_index = -1
                    for i, header in enumerate(headers):
                        if "2-–û–¢–°-1" in header:
                            group_index = i
                            break

                    if group_index == -1:
                        continue

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä—ã –∏–∑ —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
                    for row in rows[1:]:
                        cells = row.find_all(["td", "th"])
                        if len(cells) <= group_index:
                            continue

                        pair_number = cells[0].get_text(strip=True)
                        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä –ø–∞—Ä—ã (—É–±–∏—Ä–∞–µ–º "–ø–∞—Ä–∞", "—è", "-—è" –∏ –ø—Ä–æ–±–µ–ª—ã)
                        pair_number = re.sub(r"[^0-6]", "", pair_number)
                        if not pair_number:
                            continue

                        pair_info = " ".join(cells[group_index].get_text(separator=" ").split())
                        if pair_info:
                            pair_info = re.sub(r"([–∞-—è–ê-–Ø])([–ê-–Ø])", r"\1 \2", pair_info)
                            pair_info = re.sub(r"([–∞-—è–ê-–Ø])\s*–ê—É–¥\.(\d+)", r"\1 –ê—É–¥.\2", pair_info)
                            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–æ–≤
                            pair_time = self.pair_times.get(pair_number, {"start": "–≤—Ä–µ–º—è", "end": "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"})
                            pairs.append(f"{pair_number} –ø–∞—Ä–∞ ({pair_time['start']}-{pair_time['end']}): {pair_info}")

                if not pairs:
                    await utils.answer(message, self.strings["no_schedule"])
                    return

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä
                formatted_pairs = "\n".join(pairs)
                reply = self.strings["schedule_found"].format(date=date, pairs=formatted_pairs)

                await utils.answer(message, reply)

            except Exception as e:
                await utils.answer(message, f"<emoji document_id=5210952531676504517>‚ùå</emoji> –û—à–∏–±–∫–∞: {str(e)}")

    async def stcmd(self, message):
        """–°–∫–∞—á–∞—Ç—å PDF –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        await utils.answer(message, self.strings["canteen_loading"])
        
        temp_file_path = "canteen_schedule_temp.jpg" # Define a temporary file name

        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º PDF-—Ñ–∞–π–ª
            pdf_url = "https://www.novkrp.ru/data/covid_pit.pdf"
            response = requests.get(pdf_url, timeout=15)
            
            if response.status_code != 200:
                raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å PDF: —Å—Ç–∞—Ç—É—Å {response.status_code}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            content_length = len(response.content)
            if content_length > 10 * 1024 * 1024:  # 10 –ú–ë
                raise Exception("PDF —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (>10 –ú–ë)")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            images = convert_from_bytes(response.content, first_page=1, last_page=1, dpi=300) 
            if not images:
                raise Exception("PDF –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            images[0].save(temp_file_path, format="JPEG")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∫–∞–∫ —Ñ–æ—Ç–æ
            await self._client.send_file(
                message.peer_id,
                file=temp_file_path, # Pass the path to the temporary file
                caption="", # No caption needed
                link_preview=False, # Sometimes helps prevent it from being treated as a document with a link
                reply_to=message.reply_to_msg_id or message.id,
                # Explicitly set as photo if the client supports it, but usually not needed for local files
                # if you want to be extra sure, you can try force_document=False, but for local files, 
                # Telethon typically infers the type correctly from the extension.
            )
            
            await message.delete()  # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        
        except Exception as e:
            await utils.answer(message, f"<b>–û—à–∏–±–∫–∞:</b> {str(e)}")
        finally:
            # Clean up: remove the temporary file
            if os.path.exists(temp_file_path):
                try:
                    os.remove(temp_file_path)
                except Exception as e:
                    # Log or report error if file can't be removed, but don't stop execution
                    await utils.answer(message, self.strings["temp_file_error"].format(error=str(e)))

