# meta developer: Azu-nyyyyyyaaaaan
# üîê This code is licensed under CC-BY-NC Licence! - https://creativecommons.org/licenses/by-nc/4.0/

import aiohttp
import qrcode
from io import BytesIO
from PIL import Image
from .. import loader, utils
from telethon.tl.types import DocumentAttributeFilename


@loader.tds
class QRtoolsMod(loader.Module):
    """QR –∫–æ–¥ —Å–∫–∞–Ω–µ—Ä –∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä"""
    strings = {"name": "QRtools"}

    @loader.owner
    async def readqrcmd(self, message):
        """.readqr <reply to image with QR code> - –°–∫–∞–Ω–∏—Ä—É–µ—Ç QR –∫–æ–¥ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        reply = await message.get_reply_message()
        
        if not reply or not reply.media:
            await utils.answer(message, "<b>‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º QR –∫–æ–¥–∞!</b>")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if not self._is_image(reply):
            await utils.answer(message, "<b>‚ùå –≠—Ç–æ –Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!</b>")
            return
            
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            file_data = await message.client.download_file(reply.media)
            
            # –°–æ–∑–¥–∞–µ–º BytesIO –æ–±—ä–µ–∫—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image_buffer = BytesIO(file_data)
            image = Image.open(image_buffer)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–Ω–ª–∞–π–Ω API –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è QR –∫–æ–¥–∞
            async with aiohttp.ClientSession() as session:
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                image_buffer.seek(0)
                form_data = aiohttp.FormData()
                form_data.add_field('file', image_buffer, filename='qr.png', content_type='image/png')
                
                async with session.post('https://api.qrserver.com/v1/read-qr-code/', data=form_data) as response:
                    if response.status == 200:
                        result = await response.json()
                        
                        if result and len(result) > 0 and 'symbol' in result[0]:
                            qr_text = result[0]['symbol'][0]['data']
                            if qr_text:
                                await utils.answer(message, f"<b>üì± QR –∫–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç:</b>\n{qr_text}")
                            else:
                                await utils.answer(message, "<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å QR –∫–æ–¥ –∏–ª–∏ –æ–Ω –ø—É—Å—Ç–æ–π!</b>")
                        else:
                            await utils.answer(message, "<b>‚ùå QR –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏!</b>")
                    else:
                        await utils.answer(message, "<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ QR –∫–æ–¥–∞!</b>")
                        
        except Exception as e:
            await utils.answer(message, f"<b>‚ùå –û—à–∏–±–∫–∞: {str(e)}</b>")

    @loader.owner
    async def makeqrcmd(self, message):
        """.makeqr <text> - –°–æ–∑–¥–∞–µ—Ç QR –∫–æ–¥ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        text = utils.get_args_raw(message)
        
        if not text:
            await utils.answer(message, "<b>‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è QR –∫–æ–¥–∞!</b>")
            return
            
        try:
            # –°–æ–∑–¥–∞–µ–º QR –∫–æ–¥
            qr = qrcode.QRCode(
                version=1,
                error_correction=qrcode.constants.ERROR_CORRECT_L,
                box_size=10,
                border=4,
            )
            qr.add_data(text)
            qr.make(fit=True)
            
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = qr.make_image(fill_color="black", back_color="white")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ BytesIO
            buffer = BytesIO()
            img.save(buffer, format='PNG')
            buffer.seek(0)
            buffer.name = "qr_code.png"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            await message.delete()
            await message.client.send_file(
                message.to_id, 
                buffer, 
                caption=f"<b>üì± QR –∫–æ–¥ –¥–ª—è:</b> {text}",
                force_document=False
            )
            
        except Exception as e:
            await utils.answer(message, f"<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ QR –∫–æ–¥–∞: {str(e)}</b>")

    def _is_image(self, message):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
        if not message or not message.media:
            return False
            
        if message.photo:
            return True
            
        if message.document:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä
            if DocumentAttributeFilename(file_name='AnimatedSticker.tgs') in message.media.document.attributes:
                return False
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –≤–∏–¥–µ–æ/–∞—É–¥–∏–æ/–≥–∏—Ñ
            if message.gif or message.video or message.audio or message.voice:
                return False
            return True
            
        return False
