# ---------------------------------------------------------------------------------
#  /\_/\  üåê This module was loaded —á–µ—Ä–µ–∑ https://t.me/hikkamods_bot
# ( o.o )  üîì Not licensed.
#  > ^ <   ‚ö†Ô∏è Owner of heta.hikariatama.ru doesn't take any responsibilities –∏–ª–∏ intellectual property rights regarding this script
# ---------------------------------------------------------------------------------
# Name: GetPyFilesMod
# Description: –ü–æ–ª—É—á–∞–µ—Ç –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .py –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è GitHub
# Author: Yahikoro
# Commands:
# .getpy <—Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π> - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–º—ë–Ω —Ñ–∞–π–ª–æ–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .py
# ---------------------------------------------------------------------------------

import requests
import re

from .. import loader, utils

@loader.tds
class GetPyFilesMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º—ë–Ω —Ñ–∞–π–ª–æ–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .py –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è GitHub"""

    strings = {
        "name": "GetPyFilesMod",
        "invalid_url": "<b>–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π GitHub!</b>",
        "no_files_found": "<b>–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .py.</b>",
        "fetching_files": "<i>–ò—â—É —Ñ–∞–π–ª—ã...</i>",
    }

    def init(self):
        self.config = loader.ModuleConfig()

    async def getpycmd(self, message):
        """<—Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π> - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–º—ë–Ω —Ñ–∞–π–ª–æ–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .py"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings("invalid_url", message))
            return
        
        repo_url = args.rstrip("/")
        api_url = repo_url.replace("github.com", "api.github.com/repos") + "/contents"

        await utils.answer(message, self.strings("fetching_files", message))

        try:
            response = requests.get(api_url)
            response.raise_for_status()

            data = response.json()
            py_files = [
                re.sub(r"\.py$", "", file["name"])
                for file in data
                if file["name"].endswith(".py")
            ]

            if py_files:
                await utils.answer(message, "\n".join(py_files))
            else:
                await utils.answer(message, self.strings("no_files_found", message))

        except requests.RequestException as e:
            await utils.answer(message, f"<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ GitHub API:</b> <code>{str(e)}</code>")