# meta developer: Azu-nyyyyyyaaaaan
# üîê This code is licensed under CC-BY-NC Licence! - https://creativecommons.org/licenses/by-nc/4.0/

from .. import loader, utils
import re
import logging

logger = logging.getLogger(__name__)

currency_patterns = [
    r"(\d+\s*[–∫]?)\s*(–¥–æ–ª–ª–∞—Ä|–±–∞–∫—Å|usd|–µ–≤—Ä–æ|eur|—Ä—É–±–ª|—Ä|rub|–±–µ–ª\.?\s*—Ä—É–±|–±—Ä|—Ç–≥|tenge|–∫–∑—Ç|—é–∞–Ω|yuan|–π–µ–Ω|jpy|–≥—Ä–∏–≤–Ω|uah|—Ç–æ–Ω|ton)",
]

@loader.tds
class ValutatorMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç —Å –ø–æ–º–æ—â—å—é @Deltatale_Currency_Converter_Bot"""

    strings = {"name": "Valutator"}

    async def client_ready(self, client, db):
        self.client = client
        self.converter_bot = "@Deltatale_Currency_Converter_Bot"

    async def currcmd(self, message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ .curr –±–æ—Ç—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .curr <—Å—É–º–º–∞> <–≤–∞–ª—é—Ç–∞>"""
        query = message.raw_text.replace(".curr", "").strip()
        if not query:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.")
            return
        await self.send_conversion_request(query, message)

    async def watcher(self, message):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—â–µ—Ç –≤–∞–ª—é—Ç—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –±–æ—Ç—É"""
        if message.raw_text.startswith(".autocurr"):
            return
        text = message.raw_text.lower()
        for pattern in currency_patterns:
            match = re.search(pattern, text)
            if match:
                query = match.group(0)
                await self.send_conversion_request(query, message)
                break

    async def autocurrcmd(self, message):
        """–í–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤–∞–ª—é—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .autocurr"""
        await message.reply("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç –≤–∫–ª—é—á–µ–Ω–∞.")

    async def send_conversion_request(self, query, message):
        query = re.sub(r"(\d+)\s*–∫", lambda m: str(int(m.group(1)) * 1000), query)
        async with self.client.conversation(self.converter_bot) as conv:
            await conv.send_message(query)
            response = await conv.get_response()
            await message.reply(response.text)
