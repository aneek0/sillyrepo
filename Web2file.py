import io
import requests
import re
import time
from telethon.tl.types import Message
from .. import loader, utils


@loader.tds
class Web2fileMod(loader.Module):
    """Download content from link and send it as file"""

    strings = {
        "name": "Web2file",
        "no_args": "üö´ <b>Specify link</b>",
        "fetch_error": "üö´ <b>Download error</b>",
        "progress": "üì• <b>Downloading:</b> {0}% at {1}/s",
    }

    strings_ru = {
        "no_args": "üö´ <b>–£–∫–∞–∂–∏ —Å—Å—ã–ª–∫—É</b>",
        "fetch_error": "üö´ <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</b>",
        "progress": "üì• <b>–ó–∞–≥—Ä—É–∑–∫–∞:</b> {0}% —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é {1}/—Å",
        "_cls_doc": "–°–∫–∞—á–∏–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Å—ã–ª–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞",
    }

    async def web2filecmd(self, message: Message):
        """Send link content as file"""
        website = utils.get_args_raw(message)

        if not website:
            if message.reply_to_msg_id:
                replied_msg = await message.get_reply_message()
                website = self.extract_url_from_text(replied_msg.text) if replied_msg else None
        
        if not website:
            await utils.answer(message, self.strings("no_args", message))
            return

        print(f"URL to fetch: {website}")

        website = re.sub(r'<.*?>', '', website)  # –û—á–∏—Å—Ç–∫–∞ URL –æ—Ç HTML-—Ç–µ–≥–æ–≤
        if not website.startswith("http"):
            website = "http://" + website  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º http:// –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å–∞

        print(f"Corrected URL to fetch: {website}")

        try:
            # –°—Ç–∞—Ä—Ç—É–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º stream=True
            response = requests.get(website, stream=True)
            if response.status_code != 200:
                await utils.answer(message, f"üö´ <b>Error {response.status_code}: {response.reason}</b>")
                return

            total_size = int(response.headers.get('Content-Length', 0))
            downloaded = 0
            start_time = time.time()

            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            print(f"Total file size: {total_size} bytes")

            # –ë—É—Ñ–µ—Ä –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            f = io.BytesIO()

            # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            last_update_time = time.time()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
            await message.edit(self.strings("progress", message).format(0, "0 B/s"))

            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –ø–æ —á–∞—Å—Ç—è–º
            for chunk in response.iter_content(chunk_size=1024):
                if chunk:
                    f.write(chunk)
                    downloaded += len(chunk)

                    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                    progress = (downloaded / total_size) * 100

                    # –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ (–≤ –±–∞–π—Ç–∞—Ö –≤ —Å–µ–∫—É–Ω–¥—É)
                    elapsed_time = time.time() - start_time
                    speed = downloaded / elapsed_time if elapsed_time > 0 else 0
                    speed_str = self.format_speed(speed)

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É
                    if time.time() - last_update_time >= 1:
                        await message.edit(self.strings("progress", message).format(int(progress), speed_str))
                        last_update_time = time.time()  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

            f.seek(0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π

            f.name = website.split("/")[-1] or "file"

        except requests.exceptions.RequestException as e:
            print(f"Request exception: {e}")
            await utils.answer(message, f"üö´ <b>Request error: {e}</b>")
            return
        except Exception as e:
            print(f"Unexpected error: {e}")
            await utils.answer(message, f"üö´ <b>Unexpected error: {e}</b>")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å —Å URL
        caption = f"üì• Downloaded from: <code>{website}</code>"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –ø–æ–¥–ø–∏—Å—å—é —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –º–µ—Ç–æ–¥ send_file
        await self._client.send_file(message.chat_id, file=f, caption=caption)

        # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.delete()

    def format_speed(self, speed: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ"""
        units = ['B/s', 'KB/s', 'MB/s', 'GB/s']
        for unit in units:
            if speed < 1024:
                return f"{speed:.2f} {unit}"
            speed /= 1024
        return f"{speed:.2f} TB/s"

    def extract_url_from_text(self, text: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç URL –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        url_pattern = r'(https?://[^\s]+)'
        match = re.search(url_pattern, text)
        if match:
            return match.group(0)
        return None
        
