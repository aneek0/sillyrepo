# meta developer: Azu-nyyyyyyaaaaan
# üîê This code is licensed under CC-BY-NC Licence! - https://creativecommons.org/licenses/by-nc/4.0/

import asyncio
import re
from .. import loader, utils
from aiogram.types import Message as AiogramMessage

@loader.tds
class BatteryStatusMod(loader.Module):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–∞—Ç–∞—Ä–µ–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–π —á–∞—Å"""

    strings = {"name": "BatteryStatusMod"}

    async def client_ready(self, client, db):
        self.db = db
        self.client = client

        self.owner_id = (await client.get_me()).id  # ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –º–æ–¥—É–ª—è
        self.monitoring = self.db.get(self.strings["name"], "monitoring", False)

        # –ï—Å–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±—ã–ª –≤–∫–ª—é—á–µ–Ω –¥–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏, –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ —Å–Ω–æ–≤–∞
        if self.monitoring:
            asyncio.ensure_future(self.battery_monitor())

    async def bcmd(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞ –±–∞—Ç–∞—Ä–µ–∏"""
        try:
            battery_level = await self.get_battery_level()
            if battery_level is not None:
                await self.inline.bot.send_message(
                    self.owner_id, f"üîã –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞: {battery_level}%"
                )
                await utils.answer(message, "üîã –£—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –≤ –õ–° –±–æ—Ç–æ–º.")
            else:
                await utils.answer(message, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è –∑–∞—Ä—è–¥–∞.")
        except Exception as e:
            await utils.answer(message, f"–û—à–∏–±–∫–∞: {str(e)}")

    async def b20cmd(self, message):
        """–í–∫–ª—é—á–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞—Ä—è–¥–∞ –±–∞—Ç–∞—Ä–µ–∏ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –∫–∞–∂–¥—ã–π —á–∞—Å"""
        if self.monitoring:
            await utils.answer(message, "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –≤–∫–ª—é—á–µ–Ω.")
            return

        self.monitoring = True
        self.db.set(self.strings["name"], "monitoring", True)
        await utils.answer(
            message,
            "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞—Ç–∞—Ä–µ–∏ –≤–∫–ª—é—á–µ–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤–∞–º –≤ –õ–° –±–æ—Ç–æ–º –∫–∞–∂–¥—ã–π —á–∞—Å.",
        )
        asyncio.ensure_future(self.battery_monitor())

    async def stopcmd(self, message):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞—Ä—è–¥–∞ –±–∞—Ç–∞—Ä–µ–∏"""
        if not self.monitoring:
            await utils.answer(message, "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            return

        self.monitoring = False
        self.db.set(self.strings["name"], "monitoring", False)
        await utils.answer(message, "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞—Ç–∞—Ä–µ–∏ –æ—Ç–∫–ª—é—á–µ–Ω.")

    async def battery_monitor(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Ä–æ–≤–Ω—è –±–∞—Ç–∞—Ä–µ–∏ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –∫–∞–∂–¥—ã–π —á–∞—Å"""
        while self.monitoring:
            try:
                battery_level = await self.get_battery_level()
                if battery_level is not None:
                    await self.inline.bot.send_message(
                        self.owner_id, f"üîã –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞: {battery_level}%"
                    )
                else:
                    await self.inline.bot.send_message(
                        self.owner_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è –∑–∞—Ä—è–¥–∞."
                    )
                await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
            except Exception as e:
                await self.inline.bot.send_message(
                    self.owner_id, f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–∞—Ç–∞—Ä–µ–∏: {str(e)}"
                )
                break

    async def get_battery_level(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞ –±–∞—Ç–∞—Ä–µ–∏"""
        try:
            process = await asyncio.create_subprocess_shell(
                "su -c 'dumpsys battery'",
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE,
            )
            stdout, stderr = await process.communicate()

            if stderr:
                return None

            output = stdout.decode("utf-8")
            match = re.search(r"level: (\d+)", output)
            if match:
                return int(match.group(1))
            else:
                return None
        except Exception:
            return None
            