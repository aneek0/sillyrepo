# ---------------------------------------------------------------------------------
#  /\_/\  üåê –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ https://t.me/hikkamods_bot
# ( o.o )  üîì Not licensed.
#  > ^ <   ‚ö†Ô∏è –í–ª–∞–¥–µ–ª–µ—Ü heta.hikariatama.ru –Ω–µ –Ω–µ—Å–µ—Ç –Ω–∏–∫–∞–∫–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç
# ---------------------------------------------------------------------------------
# Name: GitUploader
# Description: –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª—ã –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π GitHub
# Author: Yahikoro
# Commands:
# .gitadd
# ---------------------------------------------------------------------------------

import base64
import json
import logging
import os
import subprocess
import requests
from datetime import datetime
from PIL import Image
from io import BytesIO
from requests.exceptions import ChunkedEncodingError, MissingSchema

from .. import loader, utils

logger = logging.getLogger(__name__)

@loader.tds
class GitUploader(loader.Module):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª—ã –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π GitHub"""

    strings = {
        "name": "GitUploader",
        "reply_to_file": "<b>–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ñ–∞–π–ª</b>",
        "error_file": "–§–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è",
        "connection_error": "<i>–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è</i>",
        "repo_error": "<i>–û—à–∏–±–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è</i>",
        "token_error": "<i>–û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞</i>",
        "exist_422": (
            "<b>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª. –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º"
            " —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.</b>"
        ),
        "cfg_token": "–¢–æ–∫–µ–Ω GitHub",
        "token_not_found": "–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω",
        "username_not_found": "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è GitHub –Ω–µ —É–∫–∞–∑–∞–Ω–æ",
        "repo_not_found": "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ —É–∫–∞–∑–∞–Ω",
        "cfg_gh_user": "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ GitHub",
        "cfg_gh_repo": "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π, –∫—É–¥–∞ –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            "GH_TOKEN",
            "TOKEN",
            lambda m: self.strings("cfg_token", m),
            "GH_USERNAME",
            "USERNAME",
            lambda m: self.strings("cfg_gh_user", m),
            "GH_REPO",
            "REPOSITORY",
            lambda m: self.strings("cfg_gh_repo", m),
        )

    async def client_ready(self, client, db):
        self.client = client

    @loader.owner
    async def gitaddcmd(self, message):
        if self.config["GH_TOKEN"] == "TOKEN":
            await utils.answer(message, self.strings("token_not_found", message))
            return
        if self.config["GH_USERNAME"] == "USERNAME":
            await utils.answer(message, self.strings("username_not_found", message))
            return
        if self.config["GH_REPO"] == "REPOSITORY":
            await utils.answer(message, self.strings("repo_not_found", message))
            return

        reply = await message.get_reply_message()
        if not reply or not reply.media:
            await utils.answer(message, self.strings("reply_to_file", message))
            return

        try:
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            fname = None
            extension = None
            file = await message.client.download_file(reply.media)

            if hasattr(reply.media, "document"):
                attributes = reply.media.document.attributes
                fname = next((attr.file_name for attr in attributes if hasattr(attr, 'file_name')), None)
                if fname:
                    extension = os.path.splitext(fname)[1]
                else:
                    extension = self._get_extension(reply.media.document.mime_type)
                    fname = f"file_{datetime.now().strftime('%Y%m%d_%H%M%S')}{extension}"
            elif reply.media.photo:
                extension = ".png"
                fname = f"photo_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
                file = self._convert_image_to_png(file)
            elif reply.media.sticker:
                if reply.media.sticker.is_animated:
                    extension = ".mp4"
                    fname = f"sticker_{datetime.now().strftime('%Y%m%d_%H%M%S')}.mp4"
                    file = self._convert_webm_to_mp4(file)
                else:
                    extension = ".png"
                    fname = f"sticker_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
                    file = self._convert_webp_to_png(file)
            elif reply.media.video:
                extension = ".mp4"
                fname = f"video_{datetime.now().strftime('%Y%m%d_%H%M%S')}.mp4"
            elif reply.media.audio:
                extension = ".mp3"
                fname = f"audio_{datetime.now().strftime('%Y%m%d_%H%M%S')}.mp3"
            else:
                extension = ".dat"
                fname = f"file_{datetime.now().strftime('%Y%m%d_%H%M%S')}.dat"

            # –ö–æ–¥–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ base64
            encoded_string = base64.b64encode(file).decode("utf-8")
            TOKEN = self.config["GH_TOKEN"]
            USERNAME = self.config["GH_USERNAME"]
            REPO = self.config["GH_REPO"]
            url = f"https://api.github.com/repos/{USERNAME}/{REPO}/contents/{fname}"
            head = {
                "Authorization": f"token {TOKEN}",
                "Accept": "application/vnd.github.v3+json",
            }
            git_data = json.dumps({
                "message": "Upload file",
                "content": encoded_string
            })
            r = requests.put(url, headers=head, data=git_data)
            if r.status_code == 201:
                uploaded_to = f"https://github.com/{USERNAME}/{REPO}/blob/main/{fname}"
                uploaded_to_raw = r.json()["content"]["download_url"]
                await utils.answer(
                    message,
                    (
                        f"–§–∞–π–ª <code>{fname}</code> —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π!"
                        f"\n\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª:\n<code>{uploaded_to}</code>\n"
                        f"–ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞:\n<code>{uploaded_to_raw}</code>"
                    ),
                )
            elif r.status_code == 422:
                await utils.answer(message, self.strings("exist_422", message))
            else:
                json_resp = r.json()
                git_resp = json_resp["message"]
                await utils.answer(
                    message,
                    (
                        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞! –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:\n"
                        f"<code>{git_resp}</code>"
                    ),
                )
        except requests.ConnectionError:
            await utils.answer(message, self.strings("connection_error", message))
        except MissingSchema:
            await utils.answer(message, self.strings("repo_error", message))
        except ChunkedEncodingError:
            await utils.answer(message, self.strings("token_error", message))

    def _get_extension(self, mime_type):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ MIME-—Ç–∏–ø—É."""
        mime_types = {
            "image/jpeg": ".jpg",
            "image/png": ".png",
            "video/mp4": ".mp4",
            "audio/mpeg": ".mp3",
            "application/pdf": ".pdf",
            "application/zip": ".zip",
        }
        return mime_types.get(mime_type, ".dat")

    def _convert_image_to_png(self, file_content):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç PNG."""
        image = Image.open(BytesIO(file_content))
        buffered = BytesIO()
        image.save(buffered, format="PNG")
        return buffered.getvalue()

    def _convert_webp_to_png(self, file_content):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç WEBP –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ PNG."""
        image = Image.open(BytesIO(file_content))
        buffered = BytesIO()
        image.save(buffered, format="PNG")
        return buffered.getvalue()

    def _convert_webm_to_mp4(self, file_content):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç WEBM –≤–∏–¥–µ–æ –≤ MP4 —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ffmpeg."""
        input_file = "input.webm"
        output_file = "output.mp4"

        with open(input_file, "wb") as f_in:
            f_in.write(file_content)

        subprocess.run(["ffmpeg", "-i", input_file, output_file], check=True)

        with open(output_file, "rb") as f_out:
            converted_file = f_out.read()

        os.remove(input_file)
        os.remove(output_file)

        return converted_file