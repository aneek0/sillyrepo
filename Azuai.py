# meta developer: Azu-nyyyyyyaaaaan
# üîê This code is licensed under CC-BY-NC Licence! - https://creativecommons.org/licenses/by-nc/4.0/

import aiohttp
from .. import loader, utils
from telethon import events
import os
import tempfile
import asyncio # New import for sleep
from openai import AsyncOpenAI # Changed import for OnlySq provider
import base64 # Existing, ensure it's here for media handling
import mimetypes # Existing, ensure it's here for media handling

ONLYSQ_TEXT_MODELS = [
    "gemini-2.5-flash-preview-04-17",
    "gemini-2.0-flash",
    "gemini-2.0-flash-lite",
    "gemini-1.5-flash",
    "gemini-1.5-flash-8b",
    "command-a-03-2025",
    "command-r7b-12-2024",
    "command-r-plus-04-2024",
    "command-r-plus",
    "command-r-08-2024",
    "command-r-03-2024",
    "command-r",
    "command",
    "command-nightly",
    "command-light",
    "command-light-nightly",
    "c4ai-aya-expanse-32b",
    "gpt-4o-mini",
    "gpt-4o",
    "gpt-4",
    "gpt-3.5-turbo",
    "o3-mini",
    "evil",
    "mistral-small-3.1"
]

@loader.tds
class AzuAI(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏ Gemini, OpenRouter –∏ OnlySq —Å –≤—ã–±–æ—Ä–æ–º –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏"""
    strings = {
        "name": "AzuAI"
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            "GEMINI_API_KEY", "", "API-–∫–ª—é—á –¥–ª—è Gemini AI",
            "OPENROUTER_API_KEY", "", "API-–∫–ª—é—á –¥–ª—è OpenRouter",
            "ONLYSQ_API_KEY", "openai", "API-–∫–ª—é—á –¥–ª—è OnlySq (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'openai')", # Updated default value
            "DEFAULT_PROVIDER", 1, "–ü—Ä–æ–≤–∞–π–¥–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1 - Gemini, 2 - OpenRouter, 3 - OnlySq",
            "ONLYSQ_IMAGE_MODEL", "kandinsky", "–ú–æ–¥–µ–ª—å OnlySq –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π" # New config
        )
        self.selected_models = {"gemini": "gemini-2.5-flash-preview-05-20", "openrouter": "meta-llama/llama-3.1-8b-instruct:free", "onlysq": "o3-mini"} # Updated default model for OnlySq
        self.model_lists = {"gemini": [], "openrouter": [], "onlysq": []} # Add OnlySq to model lists
        self.chat_contexts = {} # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ —á–∞—Ç–∞–º
        self.chat_histories = {} # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ —á–∞—Ç–∞–º

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.chat_contexts = self.db.get(self.strings["name"], "chat_contexts", {})
        self.chat_histories = self.db.get(self.strings["name"], "chat_histories", {})
        await self._fetch_models()

    async def _fetch_models(self):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ Gemini, OpenRouter –∏ OnlySq"""
        # Gemini
        if self.config["GEMINI_API_KEY"]:
            url = f"https://generativelanguage.googleapis.com/v1beta/models?key={self.config['GEMINI_API_KEY']}"
            async with aiohttp.ClientSession() as session:
                try:
                    async with session.get(url) as response:
                        if response.status == 200:
                            data = await response.json()
                            self.model_lists["gemini"] = [model["name"] for model in data.get("models", []) if "generateContent" in model["supportedGenerationMethods"]] # Filter for models that support generateContent
                            print("–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –º–æ–¥–µ–ª–∏ Gemini")
                            print(f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ Gemini Models (status 200): {data}")
                        else:
                            error_text = await response.text()
                            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π Gemini. –°—Ç–∞—Ç—É—Å: {response.status}, –û—Ç–≤–µ—Ç: {error_text[:200]}...")
                            self.model_lists["gemini"] = []
                except Exception as e:
                    print(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π Gemini: {str(e)}")
                    self.model_lists["gemini"] = []
        else:
             print("API-–∫–ª—é—á Gemini –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π.")
             self.model_lists["gemini"] = []

        # OpenRouter (—Ç–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ)
        if self.config["OPENROUTER_API_KEY"]:
            url = "https://openrouter.ai/api/v1/models"
            headers = {"Authorization": f"Bearer {self.config['OPENROUTER_API_KEY']}"}
            async with aiohttp.ClientSession() as session:
                try:
                    async with session.get(url, headers=headers) as response:
                        if response.status == 200:
                            data = await response.json()
                            all_openrouter_models = [model["id"] for model in data.get("data", [])]
                            self.model_lists["openrouter"] = [
                                model_id for model_id in all_openrouter_models
                                if model_id.startswith('google/') or model_id.startswith('deepseek/') or model_id.startswith('meta-llama/')
                            ]
                            print("–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –≤—Å–µ –º–æ–¥–µ–ª–∏ OpenRouter.")
                            print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π –¥–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(all_openrouter_models)}")
                            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π OpenRouter –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(self.model_lists['openrouter'])}")
                            print("–°–ø–∏—Å–æ–∫ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π OpenRouter:")
                            for model_id in self.model_lists["openrouter"]:
                                print(f"- {model_id}")
                            print(f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ OpenRouter Models (status 200): {data}")
                        else:
                            error_text = await response.text()
                            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π OpenRouter. –°—Ç–∞—Ç—É—Å: {response.status}, –û—Ç–≤–µ—Ç: {error_text}")
                            self.model_lists["openrouter"] = []
                except Exception as e:
                    print(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π OpenRouter: {str(e)}")
                    self.model_lists["openrouter"] = []
        else:
            print("API-–∫–ª—é—á OpenRouter –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π.")
            self.model_lists["openrouter"] = []

        # OnlySq (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π)
        if self.config["ONLYSQ_API_KEY"]:
            self.model_lists["onlysq"] = ONLYSQ_TEXT_MODELS # Directly assign the predefined list
            print("–ú–æ–¥–µ–ª–∏ OnlySq –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π OnlySq: {len(self.model_lists['onlysq'])}")
            print("–°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π OnlySq:")
            for model_id in self.model_lists["onlysq"]:
                print(f"- {model_id}")
        else:
            print("API-–∫–ª—é—á OnlySq –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π.")
            self.model_lists["onlysq"] = []

    def _create_model_buttons(self, service):
        """–°–æ–∑–¥–∞—Ç—å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
        buttons = []
        models = self.model_lists.get(service, [])
        if not models:
            return []
        for model in models:
            buttons.append([{"text": model, "callback": self._set_model, "args": (service, model)}])
        buttons.append([{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback": self._back_to_services}])
        return buttons

    async def aicfgcmd(self, message):
        """‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏ –º–æ–¥–µ–ª—å, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å API-–∫–ª—é—á–∏ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥—É–ª—è"""
        await self.inline.form(
            text="‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ AIModule:</b>\n\nAPI-–∫–ª—é—á–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª—è (—á–µ—Ä–µ–∑ —Ñ–∞–π–ª –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã setkey, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã).",
            message=message,
            reply_markup=[
                [{"text": "–í—ã–±–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞", "callback": self._show_settings_menu, "args": ("providers",)}],
                [{"text": "–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏", "callback": self._show_settings_menu, "args": ("models_service",)}]
            ]
        )

    async def _show_settings_menu(self, call, menu_type):
        text = ""
        reply_markup = []

        if menu_type == "main":
            text = "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ AIModule:</b>\n\nAPI-–∫–ª—é—á–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª—è (—á–µ—Ä–µ–∑ —Ñ–∞–π–ª –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã setkey, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)."
            reply_markup = [
                [{"text": "–í—ã–±–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞", "callback": self._show_settings_menu, "args": ("providers",)}],
                [{"text": "–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏", "callback": self._show_settings_menu, "args": ("models_service",)}]
            ]
        elif menu_type == "providers":
            current_provider = self.config["DEFAULT_PROVIDER"]
            def get_provider_button(provider_id, provider_name):
                text = provider_name
                if current_provider == provider_id:
                    text += "üü£"
                return {"text": text, "callback": self._set_provider, "args": (provider_id,)}

            text = "üîß <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:</b>"
            reply_markup = [
                [get_provider_button(1, "Gemini")],
                [get_provider_button(2, "OpenRouter")],
                [get_provider_button(3, "OnlySq")], # New OnlySq button
                [{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback": self._show_settings_menu, "args": ("main",)}]
            ]
        elif menu_type == "models_service":
            text = "üîß <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏:</b>"
            reply_markup = [
                [{"text": "Gemini", "callback": self._show_models, "args": ("gemini",)}],
                [{"text": "OpenRouter", "callback": self._show_models, "args": ("openrouter",)}],
                [{"text": "OnlySq", "callback": self._show_models, "args": ("onlysq",)}], # New OnlySq button
                [{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback": self._show_settings_menu, "args": ("main",)}]
            ]

        await call.edit(text=text, reply_markup=reply_markup)

    async def _set_provider(self, call, provider_id):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏"""
        self.config["DEFAULT_PROVIDER"] = provider_id
        provider_name = ""
        if provider_id == 1: provider_name = "Gemini"
        elif provider_id == 2: provider_name = "OpenRouter"
        elif provider_id == 3: provider_name = "OnlySq"
        await call.edit(f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {provider_name}")
        await asyncio.sleep(1) # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        await self._show_settings_menu(call, "providers") # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º

    async def _show_models(self, call, service):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
        models = self.model_lists.get(service, [])
        if not models:
            await call.edit(f"‚ö†Ô∏è <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è {service}.</b> –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API-–∫–ª—é—á –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            await self._show_settings_menu(call, "models_service") # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞
            return
        buttons = []
        selected_model = self.selected_models.get(service)
        for model in models:
            button_text = model
            if model == selected_model:
                button_text += "üü£"
            buttons.append([{"text": button_text, "callback": self._set_model, "args": (service, model)}])
        buttons.append([
            {"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback": self._show_settings_menu, "args": ("models_service",)}
        ])
        await call.edit(
            f"üîß <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è {service}:</b>",
            reply_markup=buttons
        )

    async def _set_model(self, call, service, model):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –∏–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏"""
        self.selected_models[service] = model
        await call.edit(f"‚úÖ <b>–ú–æ–¥–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞:</b> {model}")
        await asyncio.sleep(1) # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        await self._show_models(call, service) # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º

    async def _back_to_aicfg(self, call):
        # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞, —Ç–∞–∫ –∫–∞–∫ _show_settings_menu —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –Ω–∞–∑–∞–¥
        pass

    async def askcmd(self, message):
        """–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò. –ü—Ä–∏–º–µ—Ä: .ask –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å .ask"""
        query = utils.get_args_raw(message).strip()
        media_path = None # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º media_path –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –æ–Ω–∞ –≤—Å–µ–≥–¥–∞ –±—ã–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –º–µ–¥–∏–∞/—Ç–µ–∫—Å—Ç –∏–∑ –Ω–µ–≥–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
        if message.is_reply:
            try:
                reply_message = await message.get_reply_message()
                if reply_message:
                    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫ –∑–∞–ø—Ä–æ—Å—É, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ –ø—É—Å—Ç
                    # –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å, –µ—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø—É—Å—Ç—ã–µ
                    if reply_message.text:
                        if not query:
                            query = reply_message.text.strip()
                        else:
                            query += "\n" + reply_message.text.strip()

                    if reply_message.photo or (reply_message.document and reply_message.document.mime_type and reply_message.document.mime_type.startswith('image/')):
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
                        processing_message = await utils.answer(message, "üß† –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ó–∞–≥—Ä—É–∑–∫–∞...")
                        try:
                            media_path = await reply_message.download_media(file=tempfile.gettempdir())
                            await processing_message.edit("üß† –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")
                        except Exception as e:
                            await utils.answer(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
                            return
                    elif reply_message.document:
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
                        mime_type = reply_message.document.mime_type
                        if mime_type and (mime_type.startswith('text/') or mime_type in ['application/json', 'application/xml', 'text/html', 'text/csv', 'application/javascript', 'application/x-sh', 'application/x-python']):
                            processing_message = await utils.answer(message, f"üß† –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª ({mime_type}). –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —á—Ç–µ–Ω–∏–µ...")
                            try:
                                temp_file_path = await reply_message.download_media(file=tempfile.gettempdir())
                                with open(temp_file_path, 'r', encoding='utf-8') as f:
                                    file_content = f.read()
                                os.remove(temp_file_path) # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                                if not query:
                                    query = file_content
                                else:
                                    query += "\n\n--- –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ ---\n" + file_content
                                await processing_message.edit("üß† –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")
                            except Exception as e:
                                await utils.answer(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–ª–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
                                return
                        else:
                            # –î–ª—è –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–≤–∫–ª—é—á–∞—è –≤–∏–¥–µ–æ)
                            await utils.answer(message, f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ü—Ä—è–º–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ —Ç–∏–ø–∞ '{mime_type}' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.")
                            try:
                                # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å media_path –¥–ª—è –ò–ò
                                temp_file_to_cleanup = await reply_message.download_media(file=tempfile.gettempdir())
                                os.remove(temp_file_to_cleanup)
                            except Exception: # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
                                pass
            except Exception as e:
                await utils.answer(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–¥–∏–∞: {str(e)}")
                return

        if not query and not media_path:
            await utils.answer(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ. –ü—Ä–∏–º–µ—Ä: <code>.ask –≤–∞—à –≤–æ–ø—Ä–æ—Å</code>")
            return
        
        service = ""
        if self.config["DEFAULT_PROVIDER"] == 1: service = "gemini"
        elif self.config["DEFAULT_PROVIDER"] == 2: service = "openrouter"
        elif self.config["DEFAULT_PROVIDER"] == 3: service = "onlysq"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        # processing_message = await utils.answer(message, "üß† –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...") # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è

        chat_id = str(message.chat_id)
        is_context_enabled = self.chat_contexts.get(chat_id, False)
        history = self.chat_histories.get(chat_id, [])

        if is_context_enabled:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏ —Ç–µ–∫—Å—Ç –∏ –º–µ–¥–∏–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏, —Ç.–∫. –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —Ç–µ–∫—Å—Ç–æ–≤–∞—è
            if query:
                history.append({"role": "user", "content": query})
                self.chat_histories[chat_id] = history

        # –õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞, —Ç.–∫. Gemini —Å–∞–º —Ä–µ—à–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ Grounding (–ø–æ–∏—Å–∫)

        ai_response_message = None
        if service == "gemini":
            ai_response_message = await self._ask_gemini(message, query, history if is_context_enabled else [], media_path) # –ü–µ—Ä–µ–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª
        elif service == "openrouter":
            ai_response_message = await self._ask_openrouter(message, query, history if is_context_enabled else [], media_path) # –ü–µ—Ä–µ–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª
        elif service == "onlysq":
            ai_response_message = await self._ask_onlysq(message, query, history if is_context_enabled else [], media_path) # New call for OnlySq

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞..."
        # if processing_message:
        #     await processing_message.delete() # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–µ–¥–∏–∞—Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω
        if media_path and os.path.exists(media_path):
            os.remove(media_path)

        # –ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –ò–ò, –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–∫–ª—é—á–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–∞
        # if is_context_enabled and ai_response_message:
        #     await self.inline.form(
        #         text=ai_response_message.text, # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ò–ò
        #         message=ai_response_message, # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ —Å–æ–æ–±—â–µ–Ω–∏—é —Å –æ—Ç–≤–µ—Ç–æ–º –ò–ò
        #         reply_markup=[[{"text": "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥", "callback": self._clear_chat_history_callback}]],
        #         disable_security=True # –†–∞–∑—Ä–µ—à–∞–µ–º –±–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
        #     )

    async def _ask_gemini(self, message, query, history=[], media_path=None): # –î–æ–±–∞–≤–ª—è–µ–º history –∏ media_path –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        api_key = self.config["GEMINI_API_KEY"]
        if not api_key:
            await utils.answer(message, "API-–∫–ª—é—á –¥–ª—è Gemini –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>.setkey {{gemini,openrouter,onlysq}} &lt;–≤–∞—à_–∫–ª—é—á&gt;</code>.")
            return

        # –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å Gemini API —á–µ—Ä–µ–∑ HTTP —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Grounding
        model_id = self.selected_models['gemini'].replace('models/', '')
        url = f"https://generativelanguage.googleapis.com/v1beta/models/{model_id}:generateContent?key={api_key}"
        headers = {"Content-Type": "application/json"}

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        contents = []
        for msg in history:
            contents.append({"role": msg["role"], "parts": [{"text": msg["content"]}]})
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª, –µ—Å–ª–∏ –µ—Å—Ç—å
        parts = []
        if query:
            parts.append({"text": query})
        if media_path: # media_path –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            try:
                with open(media_path, "rb") as f:
                    encoded_media = base64.b64encode(f.read()).decode('utf-8')

                mime_type, _ = mimetypes.guess_type(media_path)
                if mime_type and mime_type.startswith('image/'):
                    parts.append({"inline_data": {"mime_type": mime_type, "data": encoded_media}})
                else:
                    # –≠—Ç–æ—Ç —Å–ª—É—á–∞–π –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, –µ—Å–ª–∏ askcmd –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç media_path
                    await utils.answer(message, "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –¥–ª—è Gemini (–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ). –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞.")

            except Exception as e:
                await utils.answer(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –¥–ª—è Gemini: {str(e)}")
                return

        if not parts:
            await utils.answer(message, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —á–∞—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è Gemini (–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –º–µ–¥–∏–∞).")
            return

        contents.append({"role": "user", "parts": parts})

        payload = {
            "contents": contents,
            "tools": [
                {
                    "googleSearch": {} # –û—Å—Ç–∞–≤–ª—è–µ–º Grounding –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
                }
            ]
        }

        async with aiohttp.ClientSession() as session:
            try:
                async with session.post(url, json=payload, headers=headers) as response:
                    if response.status != 200:
                        error_text = await response.text()
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                        await utils.answer(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini (HTTP): Status {response.status}: {error_text[:200]}...")
                        return
                    data = await response.json()

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
                    if data and "candidates" in data and data["candidates"]:
                         answer_parts = []
                         for part in data["candidates"][0]["content"]["parts"]:
                              if "text" in part:
                                   answer_parts.append(part["text"])
                              if "groundingAttributions" in part:
                                   for attribution in part["groundingAttributions"]:
                                        if "uri" in attribution:
                                             answer_parts.append(f" [[{attribution.get('title', '—Å—Å—ã–ª–∫–∞')}]]({'uri'})")

                         answer = "".join(answer_parts)

                         if not answer:
                             if data["candidates"][0].get("finishReason") == "SAFETY" or data["candidates"][0].get("blockReason"):
                                  block_reason = data["candidates"][0].get("blockReason") or data["candidates"][0].get("finishReason")
                                  await utils.answer(message, f"‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –∫ Gemini –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {block_reason}")
                             else:
                                  await utils.answer(message, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini (HTTP): –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")
                         else:
                             await utils.answer(message, f"<b>Gemini ({self.selected_models['gemini']}):</b>\n{answer}")
                             # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–∫–ª—é—á–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò –≤ –∏—Å—Ç–æ—Ä–∏—é
                             if str(message.chat_id) in self.chat_contexts and self.chat_contexts[str(message.chat_id)]:
                                self.chat_histories[str(message.chat_id)].append({"role": "model", "content": answer})
                                self.db.set(self.strings["name"], "chat_histories", self.chat_histories) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î

                    elif data and "promptFeedback" in data and data["promptFeedback"].get("blockReason"):
                         block_reason = data["promptFeedback"]["blockReason"]
                         await utils.answer(message, f"‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –∫ Gemini –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {block_reason}")
                    else:
                         await utils.answer(message, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini (HTTP): –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API")

            except Exception as e:
                await utils.answer(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini (HTTP): {str(e)}")

    async def _ask_openrouter(self, message, query, history=[], media_path=None): # –î–æ–±–∞–≤–ª—è–µ–º history –∏ media_path –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        api_key = self.config["OPENROUTER_API_KEY"]
        if not api_key:
            await utils.answer(message, "API-–∫–ª—é—á –¥–ª—è OpenRouter –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>.setkey {{gemini,openrouter,onlysq}} &lt;–≤–∞—à_–∫–ª—é—á&gt;</code>.")
            return
        url = "https://openrouter.ai/api/v1/chat/completions"
        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        messages = []
        for msg in history:
            messages.append({"role": msg["role"], "content": msg["content"]})
        
        # OpenRouter –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–π –≤–≤–æ–¥ –∏–∑ –∫–æ—Ä–æ–±–∫–∏ —á–µ—Ä–µ–∑ —Å–≤–æ–π `/chat/completions` API –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π.
        # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–¥–µ–ª–∏ –º–æ–≥—É—Ç –∏–º–µ—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏–ª–∏ —Ç—Ä–µ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç.
        # –ü–æ–∫–∞ —á—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞, –º—ã –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∏–º, —á—Ç–æ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è OpenRouter –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞.
        if media_path:
            await utils.answer(message, "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: OpenRouter –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä—è–º—É—é –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π/–≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ —Ç–µ–∫—É—â–∏–π API. –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞.")

        messages.append({"role": "user", "content": query})

        payload = {
            "model": self.selected_models["openrouter"],
            "messages": messages
        }
        async with aiohttp.ClientSession() as session:
            try:
                async with session.post(url, json=payload, headers=headers) as response:
                    if response.status != 200:
                        error_text = await response.text()
                        await utils.answer(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenRouter: Status {response.status}: {error_text[:200]}...")
                        return
                    data = await response.json()
                    answer = data["choices"][0]["message"]["content"]
                    await utils.answer(message, f"<b>OpenRouter ({self.selected_models['openrouter']}):</b>\n{answer}")
                    # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–∫–ª—é—á–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò –≤ –∏—Å—Ç–æ—Ä–∏—é
                    if str(message.chat_id) in self.chat_contexts and self.chat_contexts[str(message.chat_id)]:
                        self.chat_histories[str(message.chat_id)].append({"role": "model", "content": answer})
                        self.db.set(self.strings["name"], "chat_histories", self.chat_histories) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            except Exception as e:
                await utils.answer(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenRouter: {str(e)}")

    async def _ask_onlysq(self, message, query, history=[], media_path=None): # New function for OnlySq
        api_key = self.config["ONLYSQ_API_KEY"]
        if not api_key:
            await utils.answer(message, "API-–∫–ª—é—á –¥–ª—è OnlySq –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>.setkey {{gemini,openrouter,onlysq}} &lt;–≤–∞—à_–∫–ª—é—á&gt;</code>.")
            return
        
        client = AsyncOpenAI(
            base_url="https://api.onlysq.ru/ai/openai",
            api_key=api_key,
        )

        messages = []
        for msg in history:
            messages.append({"role": msg["role"], "content": msg["content"]})

        content_parts = []
        if query:
            content_parts.append({"type": "text", "text": query})
        
        if media_path: # Check for image media
            try:
                with open(media_path, "rb") as f:
                    encoded_media = base64.b64encode(f.read()).decode('utf-8')
                mime_type, _ = mimetypes.guess_type(media_path)
                if mime_type and mime_type.startswith('image/'):
                    content_parts.append({"type": "image_url", "image_url": {"url": f"data:{mime_type};base64,{encoded_media}"}})
                else:
                    await utils.answer(message, "OnlySq: –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ (–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ). –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞.")
            except Exception as e:
                await utils.answer(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –¥–ª—è OnlySq: {str(e)}")
                return

        if not content_parts:
            await utils.answer(message, "OnlySq: –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —á–∞—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞ (–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –º–µ–¥–∏–∞).")
            return

        messages.append({"role": "user", "content": content_parts})

        try:
            completion = await client.chat.completions.create(
                model=self.selected_models["onlysq"],
                messages=messages,
            )
            answer = completion.choices[0].message.content
            await utils.answer(message, f"<b>OnlySq ({self.selected_models['onlysq']}):</b>\n{answer}")
            if str(message.chat_id) in self.chat_contexts and self.chat_contexts[str(message.chat_id)]:
                self.chat_histories[str(message.chat_id)].append({"role": "model", "content": answer})
                self.db.set(self.strings["name"], "chat_histories", self.chat_histories) # Save to DB
        except Exception as e:
            await utils.answer(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OnlySq: {str(e)}")

    async def chatcmd(self, message):
        """–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞."""
        chat_id = str(message.chat_id)
        if chat_id not in self.chat_contexts:
            self.chat_contexts[chat_id] = False # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–µ–Ω

        self.chat_contexts[chat_id] = not self.chat_contexts[chat_id] # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.db.set(self.strings["name"], "chat_contexts", self.chat_contexts) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î

        status = "–≤–∫–ª—é—á–µ–Ω" if self.chat_contexts[chat_id] else "–≤—ã–∫–ª—é—á–µ–Ω"
        await utils.answer(message, f"–†–µ–∂–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ {status}.")

    async def clearchatcmd(self, message):
        """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞."""
        chat_id = str(message.chat_id)
        if chat_id in self.chat_histories:
            del self.chat_histories[chat_id]
            self.db.set(self.strings["name"], "chat_histories", self.chat_histories)
            await utils.answer(message, "–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞.")
        else:
            await utils.answer(message, "–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —É–∂–µ –ø—É—Å—Ç–∞.")

    # async def _clear_chat_history_callback(self, call):
    #     """Callback –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞."""
    #     chat_id = str(call.chat_id)
    #     if chat_id in self.chat_histories:
    #         del self.chat_histories[chat_id]
    #         self.db.set(self.strings["name"], "chat_histories", self.chat_histories)
    #         await call.edit("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞.", reply_markup=None)
    #     else:
    #         await call.edit("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —É–∂–µ –ø—É—Å—Ç–∞.", reply_markup=None)

    async def imgcmd(self, message):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é OnlySq. –ü—Ä–∏–º–µ—Ä: .img –≤–∞—à –∑–∞–ø—Ä–æ—Å"""
        query = utils.get_args_raw(message).strip()
        if not query:
            await utils.answer(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: <code>.img –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞ –ø–ª—è–∂–µ</code>")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        processing_message = await utils.answer(message, "üß† –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω...")

        image_path = await self._generate_image_onlysq(message, query)

        if processing_message:
            await processing_message.delete()

        if image_path:
            try:
                await self.client.send_file(
                    message.chat_id,
                    image_path,
                    caption=f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: <i>{query}</i>",
                    reply_to=message.id
                )
            except Exception as e:
                await utils.answer(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
            finally:
                if os.path.exists(image_path):
                    os.remove(image_path)
        else:
            await utils.answer(message, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

    async def _generate_image_onlysq(self, message, prompt):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é OnlySq API."""
        api_key = self.config["ONLYSQ_API_KEY"]
        if not api_key:
            api_key = "openai" # Use "openai" as default if key is empty

        image_model = self.config["ONLYSQ_IMAGE_MODEL"]
        url = "https://api.onlysq.ru/ai/imagen"
        headers = {"Content-Type": "application/json"}

        payload = {
            "model": image_model,
            "prompt": prompt,
            "width": 1024, # Default width
            "height": 1024, # Default height
            "count": 1 # Number of images to generate
        }

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=payload, headers=headers) as response:
                    if response.status != 200:
                        error_text = await response.text()
                        await utils.answer(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç OnlySq (HTTP): Status {response.status}: {error_text[:200]}...")
                        return None
                    
                    data = await response.json()
                    if data and "files" in data and data["files"]:
                        # Get the first image from the list of files (base64 encoded)
                        encoded_image = data["files"][0]
                        decoded_image = base64.b64decode(encoded_image)

                        # Save to a temporary file
                        temp_image_path = os.path.join(tempfile.gettempdir(), "generated_image.png")
                        with open(temp_image_path, "wb") as f:
                            f.write(decoded_image)
                        
                        return temp_image_path
                    else:
                        await utils.answer(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç OnlySq.")
                        return None
        except Exception as e:
            await utils.answer(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OnlySq Imagen API: {str(e)}")
            return None
