# meta developer: @procot1
import json
import os  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º os

import aiohttp
import requests
from telethon import events
from .. import loader, utils
import re
from time import sleep

@loader.tds
class AIsupport(loader.Module):
    """
    AI - –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ Hikka.
    üåòVersion: 4.1 | –ú–æ–¥—É–ª–∏ –ø–æ—Ä–∞–∂–¥–∞—é—Ç –º–æ–¥—É–ª–∏ - FULL
    ‚ö°–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @procot1
    üíö–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å
    """
    strings = {"name": "AI-sup Hikka"}

    def __init__(self):
        super().__init__()
        self.default_model = "gpt-4o-mini"
        self.instructions = self.get_instructions()
        self.error_instructions = self.get_error_instructions()
        self.module_instructions = self.get_module_instruction()
        self.double_instructions = self.get_double_instruction()
        self.allmodule_instruction = self.get_allmodule_instruction()
        self.module_instruction2 = self.get_module_instruction2()
        self.module_instruction3 = self.get_module_instruction3()

    @loader.unrestricted
    async def aisupcmd(self, message):
        """
        –°–ø—Ä–æ—Å–∏—Ç—å —É AI –ø–æ–º–æ—â–Ω–∏–∫–∞.
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.aisup <–∑–∞–ø—Ä–æ—Å>` –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å `.aisup`
        
        üß†–°–∫–æ—Ä–º–ª–µ–Ω—ã –∑–Ω–∞–Ω–∏—è: 
        ‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∏ | –∫–æ–º–∞–Ω–¥—ã –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π | –í–Ω–µ—à–Ω–∏–µ –º–æ–¥—É–ª–∏(40 –º–æ–¥—É–ª–µ–π) | —á–∞—Ç—ã –•–∏–∫–∫–∏ | –Ω—é–Ω—Å—ã –•–∏–∫–∫–∏ | –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–≥–∫ —Å –º–æ–¥—É–ª—è–º–∏ | –º–µ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ | –°–ø–∏—Å–æ–∫ —Å–æ–≤–µ—Ç–æ–≤ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –æ—à–∏–±–æ–∫ | –î–∞–Ω–Ω—ã–µ –æ —Ö–∏–∫–∫–µ
        
        """
        r = "sup"
        await self.process_request(message, self.instructions, r)

    @loader.unrestricted
    async def aierrorcmd(self, message):
        """
        –°–ø—Ä–æ—Å–∏—Ç—å —É AI –ø–æ–º–æ—â–Ω–∏–∫–∞ –æ–± –æ—à–∏–±–∫–µ –º–æ–¥—É–ª—è.
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.aierror <–∑–∞–ø—Ä–æ—Å>` –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å `.aierror`
        
        üß†–°–∫–æ—Ä–º–ª–µ–Ω—ã –∑–Ω–∞–Ω–∏—è(old data set):
        ‚Ä¢ –∫–æ–º–∞–Ω–¥—ã –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π | —á–∞—Ç—ã –•–∏–∫–∫–∏ | –±–æ–ª—å—à–µ –Ω—é–∞–Ω—Å–æ–≤ –∏ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ —Ä–∞–±–æ—Ç—ã –•–∏–∫–∫–∏ | –ø—Ä–∏–º–µ—Ä—ã –æ—à–∏–±–æ–∫ –∏ –∏—Ö —Ä–µ—à–µ–Ω–∏–π | –±–æ–ª—å—à–æ–π —Å–ø–∏—Å–æ–∫ —Å–æ–≤–µ—Ç–æ–≤ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –æ—à–∏–±–æ–∫
        
        """
        r = "error"
        await self.process_request(message, self.error_instructions, r)

    def get_instructions(self):
        url = 'https://raw.githubusercontent.com/Chaek1403/VAWEIRR/refs/heads/main/instruction.txt'
        response = requests.get(url)
        return response.text

    def get_error_instructions(self):
        url = 'https://raw.githubusercontent.com/Chaek1403/VAWEIRR/refs/heads/main/error_instruction.txt'
        response = requests.get(url)
        return response.text

    def get_module_instruction(self):
        url = 'https://raw.githubusercontent.com/Chaek1403/VAWEIRR/refs/heads/main/module_instruction.txt'
        response = requests.get(url)
        return response.text

    def get_double_instruction(self):
        url = 'https://raw.githubusercontent.com/Chaek1403/VAWEIRR/refs/heads/main/double_instruction.txt'
        response = requests.get(url)
        return response.text
    def get_allmodule_instruction(self):
        url = 'https://raw.githubusercontent.com/Chaek1403/VAWEIRR/refs/heads/main/allmodules.txt'
        response = requests.get(url)
        return response.text
        
    def get_module_instruction2(self):
        url = 'https://raw.githubusercontent.com/Chaek1403/VAWEIRR/refs/heads/main/module_instruction2.txt'
        response = requests.get(url)
        return response.text
        
    def get_module_instruction3(self):
        url = 'https://raw.githubusercontent.com/Chaek1403/VAWEIRR/refs/heads/main/module_instruction3.txt'
        response = requests.get(url)
        return response.text

    @loader.unrestricted
    async def aiinfocmd(self, message):
        """
        - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏‚úÖ
        """
        await message.edit('''<b>üß¨–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ 4.1:
–ò–∑–º–µ–Ω–µ–Ω–æ:
- –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ—ç—Ç–∞–ø–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥—É–ª—è. –î–ª—è –∫–æ–º–∞–Ω–¥—ã aicreate.
- –ï—Å–ª–∏ –∫–æ–¥ –±–æ–ª—å—à–æ–π, –≤—ã—Å—ã–ª–∞–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–æ —Ñ–∞–π–ª

–ö–∞–∫ —ç—Ç–æ: 
- –ú–æ–¥–µ–ª—å —Å –¥–∞—Ç–∞-—Å–µ—Ç–æ–º(1) –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥
- –∑–∞—Ç–µ–º –º–æ–¥–µ–ª—å —Å –¥–∞—Ç–∞ —Å–µ—Ç–æ–º(2) –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –∫–æ–¥.
- –∑–∞—Ç–µ–º –º–æ–¥–µ–ª—å —Å –¥–∞—Ç–∞ —Å–µ—Ç–æ–º(3) –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –Ω–∞ –±–µ–∑–æ–ø–∞—Å—Ç–Ω–æ—Å—Ç—å –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –∫–æ–¥.
- –ø–æ—Å–ª–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –≥–æ—Ç–æ–≤—ã–π –º–æ–¥—É–ª—å.

üí´–ø–æ–ª—É—á–∞–µ—Ç—Å—è —Ç–∞–∫–∞—è —Å—Ö–µ–º–∞: –ó–∞–ø—Ä–æ—Å>–¥—Ç1>–¥—Ç2>–¥—Ç3>–ú–æ–¥—É–ª—å
üîó–¢–≥ –∫–∞–Ω–∞–ª –º–æ–¥—É–ª—è: https://t.me/hikkagpt</b>''')

    async def allmodule(self, answer, message, request_text):
        chat_id = str(message.chat_id)
        rewrite2 = self.get_allmodule_instruction()
        api_url = "http://api.onlysq.ru/ai/v2"
        sleep(4)

        payload = {
            "model": "gpt-4o-mini",
            "request": {
                "messages": [
                    {
                        "role": "user",
                        "content": f"{rewrite2}\n–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {request_text}\n–û—Ç–≤–µ—Ç –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏ –º–æ–¥—É–ª—è:{answer}"
                    }
                ]
            }
        }

        try:
            await message.edit("<b>üé≠–¶–µ–ø–æ—á–∫–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π –º–æ–¥–µ–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ:\nüü¢–ü–µ—Ä–≤–∞—è –º–æ–¥–µ–ª—å –ø—Ä–∏–Ω—è–ª–∞ —Ä–µ—à–µ–Ω–∏–µ\nüü¢–í—Ç–æ—Ä–∞—è –º–æ–¥–µ–ª—å –ø—Ä–∏–Ω—è–ª–∞ —Ä–µ—à–µ–Ω–∏–µ.\nüí≠–¢—Ä–µ—Ç—å—è –º–æ–¥–µ–ª—å –¥—É–º–∞–µ—Ç...</b>\n\n–ü–æ—á–µ–º—É —Ç–∞–∫ –¥–æ–ª–≥–æ: –∫–∞–∂–¥–∞—è –º–æ–¥–µ–ª—å –∏–º–µ–µ—Ç —Å–≤–æ–π –¥–∞—Ç–∞ —Å–µ—Ç. –ò —Å–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –º–æ–¥–µ–ª–∏ —Å —Å–≤–æ–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏.")

            async with aiohttp.ClientSession() as session:
                async with session.post(api_url, json=payload) as response:
                    response.raise_for_status()
                    data = await response.json()
                    answer = data.get("answer", "üö´ –û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω.").strip()
                    formatted_answer = f"‚ùî –ó–∞–ø—Ä–æ—Å:\n`{request_text}`\n\nüí° <b>–û—Ç–≤–µ—Ç AI-–ø–æ–º–æ—â–Ω–∏–∫–∞ –ø–æ Hikka</b>:\n{answer}"
                    await message.edit(formatted_answer)

        except aiohttp.ClientError as e:
            await message.edit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –º–æ–¥–µ–ª—å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ –º–æ–¥—É–ª—è.")
     
    async def modulecreating(self, answer, message, request_text):
        chat_id = str(message.chat_id)
        rewrite = self.get_module_instruction2()
        api_url = "http://api.onlysq.ru/ai/v2"

        payload = {
            "model": "gpt-4o-mini",
            "request": {
                "messages": [
                    {
                        "role": "user",
                        "content": f"{rewrite}\nUser request: {request_text}\nAnswer to the first part of the module:{answer}"
                    }
                ]
            }
        }

        try:
            await message.edit("<b>üé≠–°–æ–∑–¥–∞–µ—Ç—Å—è –º–æ–¥—É–ª—å:\nüü¢–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–¥–∞\nüí≠–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...</b>\n\n–ó–∞–º–µ—Ç–∫–∞: —á–µ–º –ª—É—á—à–µ –≤—ã —Ä–∞—Å—Å–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –º–æ–¥–µ–ª–∏ - —Ç–µ–º –ª—É—á—à–µ –æ–Ω–∞ —Å–æ–∑–¥–∞—Å—Ç –º–æ–¥—É–ª—å. ")

            async with aiohttp.ClientSession() as session:
                async with session.post(api_url, json=payload) as response:
                    response.raise_for_status()
                    data = await response.json()
                    answer = data.get("answer", "üö´ –û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω.").strip()
                    await self.modulecreating2(answer, message, request_text)

        except aiohttp.ClientError as e:
            await message.edit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –º–æ–¥–µ–ª—å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ –º–æ–¥—É–ª—è.")
            

    async def modulecreating2(self, answer, message, request_text):
        chat_id = str(message.chat_id)
        rewrite = self.get_module_instruction3()
        api_url = "http://api.onlysq.ru/ai/v2"
    
        payload = {
            "model": "gpt-4o-mini",
            "request": {
                "messages": [
                    {
                        "role": "user",
                        "content": f"{rewrite}\nUser request: {request_text}\nAnswer to the first part of the module:{answer}"
                    }
                ]
            }
        }
    
        try:
            await message.edit("<b>üé≠–°–æ–∑–¥–∞–µ—Ç—Å—è –º–æ–¥—É–ª—å:\nüü¢–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–¥–∞\nüü¢–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ\nüí≠–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–µ–∑–æ–ø–∞—Å—Ç–Ω–æ—Å—Ç—å –∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...</b>\n\n–ï—â–µ –∑–∞–º–µ—Ç–∫–∞: –õ—É—á—à–µ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —á—Ç–æ –Ω–∞–ø–∏—Å–∞–ª–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—å, –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å.")
    
            async with aiohttp.ClientSession() as session:
                async with session.post(api_url, json=payload) as response:
                    response.raise_for_status()
                    data = await response.json()
                    answer = data.get("answer", "üö´ –û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω.").strip()
    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞
                    if len(answer) > 4096:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
                        await message.edit("‚ö†Ô∏è –ö–æ–¥ –º–æ–¥—É–ª—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏. –ë—ã–ª –≤—ã—Å–ª–∞–Ω –ø—Ä–æ—Å—Ç–æ —Ñ–∞–π–ª.")
                        await self.save_and_send_code(answer, message)
                    else:
                        await message.edit(f"<b>üí° –û—Ç–≤–µ—Ç AI-–ø–æ–º–æ—â–Ω–∏–∫–∞ –ø–æ Hikka | –ö—Ä–µ–∞—Ç–æ—Ä –º–æ–¥—É–ª–µ–π</b>:\n{answer}")
                        await self.save_and_send_code(answer, message)
    
        except aiohttp.ClientError as e:
            await message.edit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –º–æ–¥–µ–ª—å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ –º–æ–¥—É–ª—è.")
    
        except RPCError as e:
            if "Message was too long" in str(e):
                await message.edit("‚ö†Ô∏è –ö–æ–¥ –º–æ–¥—É–ª—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...")
                await self.save_and_send_code(answer, message)
            else:
                await message.edit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ RPC: {e}")


    

    async def rewrite_process(self, answer, message, request_text):
        r = 'rewrite'
        api_url = "http://api.onlysq.ru/ai/v2"
        chat_id = str(message.chat_id)
        rewrite = self.get_double_instruction()

        payload = {
            "model": "gpt-4o-mini",
            "request": {
                "messages": [
                    {
                        "role": "user",
                        "content": f"{rewrite}\n–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {request_text}\n–û—Ç–≤–µ—Ç –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ –º–æ–¥—É–ª—è:{answer}"
                    }
                ]
            }
        }

        try:
            await message.edit("<b>üé≠–¶–µ–ø–æ—á–∫–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π –º–æ–¥–µ–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ:\nüü¢–ü–µ—Ä–≤–∞—è –º–æ–¥–µ–ª—å –ø—Ä–∏–Ω—è–ª–∞ —Ä–µ—à–µ–Ω–∏–µ\nüí≠–í—Ç–æ—Ä–∞—è –º–æ–¥–µ–ª—å –¥—É–º–∞–µ—Ç...</b>\n\n–ü–æ—á–µ–º—É —Ç–∞–∫ –¥–æ–ª–≥–æ: –∫–∞–∂–¥–∞—è –º–æ–¥–µ–ª—å –∏–º–µ–µ—Ç —Å–≤–æ–π –¥–∞—Ç–∞ —Å–µ—Ç. –ò —Å–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –º–æ–¥–µ–ª–∏ —Å —Å–≤–æ–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏.")

            async with aiohttp.ClientSession() as session:
                async with session.post(api_url, json=payload) as response:
                    response.raise_for_status()
                    data = await response.json()
                    answer = data.get("answer", "üö´ –û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω.").strip()
                    await self.allmodule(answer, message, request_text)

        except aiohttp.ClientError as e:
            await message.edit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –º–æ–¥–µ–ª—å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ –º–æ–¥—É–ª—è.")



    @loader.unrestricted
    async def aicreatecmd(self, message):
        """
        –ü–æ–ø—Ä–æ—Å–∏—Ç—å AI –ø–æ–º–æ—â–Ω–∏–∫–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –º–æ–¥—É–ª—å.
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.aicreate <–∑–∞–ø—Ä–æ—Å>` –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å `.aicreate`
        
        üß†–°–∫–æ—Ä–º–ª–µ–Ω—ã –∑–Ω–∞–Ω–∏—è:
        ‚Ä¢ –í—Å—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—é –º–æ–¥—É–ª–µ–π Hikka (–∫—Ä–æ–º–µ Hikka only) | –º–µ–ª–∫–∏–µ –Ω–∞–≤–æ–¥—è—â–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        
        """
        r = "create"
        await self.process_request(message, self.module_instructions, r)

    async def save_and_send_code(self, answer, message):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–¥ –≤ —Ñ–∞–π–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –∏ —É–¥–∞–ª—è–µ—Ç."""
        try:
            code_start = answer.find("`python") + len("`python")
            code_end = answer.find("```", code_start)
            code = answer[code_start:code_end].strip()
    
            with open("AI-module.py", "w") as f:
                f.write(code)
    
            await message.client.send_file(
                message.chat_id,
                "AI-module.py",
                caption="<b>üí´–í–∞—à –≥–æ—Ç–æ–≤—ã–π –º–æ–¥—É–ª—å</b>",
            )
    
            os.remove("AI-module.py")
    
        except (TypeError, IndexError) as e:
            await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∫–æ–¥–∞: {e}")
        except Exception as e:  
            await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–¥–∞: {e}")


    async def process_request(self, message, instructions, command):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –º–æ–¥–µ–ª–∏ –ò–ò.
        """
        reply = await message.get_reply_message()
        args = utils.get_args_raw(message)

        if reply:
            request_text = reply.raw_text
        elif args:
            request_text = args
        else:
            await message.edit("ü§î –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            return

        api_url = "http://api.onlysq.ru/ai/v2"
        chat_id = str(message.chat_id)

        payload = {
            "model": "gpt-4o-mini",
            "request": {
                "messages": [
                    {
                        "role": "user",
                        "content": f"{instructions}\n–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {request_text}"
                    }
                ]
            }
        }

        try:
            await message.edit("<b>ü§î –î—É–º–∞—é...</b>")

            async with aiohttp.ClientSession() as session:
                async with session.post(api_url, json=payload) as response:
                    response.raise_for_status()
                    data = await response.json()
                    answer = data.get("answer", "üö´ –û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω.").strip()

                    if command == "error":
                        formatted_answer = f"üí°<b> –û—Ç–≤–µ—Ç AI-–ø–æ–º–æ—â–Ω–∏–∫–∞ –ø–æ Hikka | –°–ø–µ—Ü. –ø–æ –æ—à–∏–±–∫–∞–º</b>:\n{answer}"
                        await message.edit(formatted_answer)
                    elif command == "sup":
                        await message.edit("<b>üí¨–†–∞–∑–º—ã—à–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –Ω–∞—á–∞–ª–∏—Å—å..</b>")
                        await self.rewrite_process(answer, message, request_text)
                    elif command == "create":
                        await self.modulecreating(answer, message, request_text)
                    elif command == 'rewrite':
                        formatted_answer = f"‚ùî –ó–∞–ø—Ä–æ—Å:\n`{request_text}`\n\nüí° <b>–û—Ç–≤–µ—Ç AI-–ø–æ–º–æ—â–Ω–∏–∫–∞ –ø–æ Hikka</b>:\n{answer}"
                        await message.edit(formatted_answer)
                    else:
                        formatted_answer = answer
                        await message.edit(formatted_answer)

        except aiohttp.ClientError as e:
            await message.edit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –º–æ–¥–µ–ª—å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ –º–æ–¥—É–ª—è.")
            
